
nucleoF411_getting_started.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f7c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08006114  08006114  00016114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  080063b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000434  20000020  080063d8  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000454  080063d8  00020454  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011a1c  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b6a  00000000  00000000  00031a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001140  00000000  00000000  000345d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001020  00000000  00000000  00035718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000078c3  00000000  00000000  00036738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019e09  00000000  00000000  0003dffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa134  00000000  00000000  00057e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00101f38  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004944  00000000  00000000  00101f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080060fc 	.word	0x080060fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080060fc 	.word	0x080060fc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f94f 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f000 f808 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f003 ffea 	bl	8004d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x54>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x58>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f967 	bl	800104e <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f000 f92f 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x5c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004
 8000db8:	20000000 	.word	0x20000000

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	200000fc 	.word	0x200000fc

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	200000fc 	.word	0x200000fc

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff ffee 	bl	8000de4 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e22:	bf00      	nop
 8000e24:	f7ff ffde 	bl	8000de4 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000004 	.word	0x20000004

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2205      	movs	r2, #5
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b8:	b2db      	uxtb	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e159      	b.n	8001398 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8148 	bne.w	8001392 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x4a>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b12      	cmp	r3, #18
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	69b9      	ldr	r1, [r7, #24]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d00b      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a2 	beq.w	8001392 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a56      	ldr	r2, [pc, #344]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b54      	ldr	r3, [pc, #336]	; (80013b0 <HAL_GPIO_Init+0x2e8>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a49      	ldr	r2, [pc, #292]	; (80013b8 <HAL_GPIO_Init+0x2f0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d019      	beq.n	80012ca <HAL_GPIO_Init+0x202>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a48      	ldr	r2, [pc, #288]	; (80013bc <HAL_GPIO_Init+0x2f4>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d013      	beq.n	80012c6 <HAL_GPIO_Init+0x1fe>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <HAL_GPIO_Init+0x2f8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d00d      	beq.n	80012c2 <HAL_GPIO_Init+0x1fa>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a46      	ldr	r2, [pc, #280]	; (80013c4 <HAL_GPIO_Init+0x2fc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d007      	beq.n	80012be <HAL_GPIO_Init+0x1f6>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a45      	ldr	r2, [pc, #276]	; (80013c8 <HAL_GPIO_Init+0x300>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d101      	bne.n	80012ba <HAL_GPIO_Init+0x1f2>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x204>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <HAL_GPIO_Init+0x2ec>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ea:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x304>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130e:	4a2f      	ldr	r2, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_GPIO_Init+0x304>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_GPIO_Init+0x304>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_GPIO_Init+0x304>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_GPIO_Init+0x304>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f aea2 	bls.w	80010e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f806 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800149a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d003      	beq.n	80014b2 <HAL_I2C_EV_IRQHandler+0x38>
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b40      	cmp	r3, #64	; 0x40
 80014ae:	f040 80b6 	bne.w	800161e <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10d      	bne.n	80014e8 <HAL_I2C_EV_IRQHandler+0x6e>
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80014d2:	d003      	beq.n	80014dc <HAL_I2C_EV_IRQHandler+0x62>
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80014da:	d101      	bne.n	80014e0 <HAL_I2C_EV_IRQHandler+0x66>
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <HAL_I2C_EV_IRQHandler+0x68>
 80014e0:	2300      	movs	r3, #0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	f000 8127 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00c      	beq.n	800150c <HAL_I2C_EV_IRQHandler+0x92>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	0a5b      	lsrs	r3, r3, #9
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f001 fb6b 	bl	8002bda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fd05 	bl	8001f14 <I2C_Master_SB>
 800150a:	e087      	b.n	800161c <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <HAL_I2C_EV_IRQHandler+0xb2>
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	0a5b      	lsrs	r3, r3, #9
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fd73 	bl	8002010 <I2C_Master_ADD10>
 800152a:	e077      	b.n	800161c <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d009      	beq.n	800154c <HAL_I2C_EV_IRQHandler+0xd2>
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fd8d 	bl	8002064 <I2C_Master_ADDR>
 800154a:	e067      	b.n	800161c <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d030      	beq.n	80015ba <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001566:	f000 80e8 	beq.w	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	09db      	lsrs	r3, r3, #7
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00f      	beq.n	8001596 <HAL_I2C_EV_IRQHandler+0x11c>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	0a9b      	lsrs	r3, r3, #10
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_I2C_EV_IRQHandler+0x11c>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f9e6 	bl	8001960 <I2C_MasterTransmit_TXE>
 8001594:	e042      	b.n	800161c <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80cb 	beq.w	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	0a5b      	lsrs	r3, r3, #9
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80c4 	beq.w	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 facc 	bl	8001b50 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015b8:	e0bf      	b.n	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015c8:	f000 80b7 	beq.w	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	099b      	lsrs	r3, r3, #6
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00f      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x17e>
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	0a9b      	lsrs	r3, r3, #10
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d009      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x17e>
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 fb23 	bl	8001c3c <I2C_MasterReceive_RXNE>
 80015f6:	e011      	b.n	800161c <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 809a 	beq.w	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	0a5b      	lsrs	r3, r3, #9
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8093 	beq.w	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fb93 	bl	8001d40 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800161a:	e08e      	b.n	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
 800161c:	e08d      	b.n	800173a <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e007      	b.n	8001640 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <HAL_I2C_EV_IRQHandler+0x1f8>
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	0a5b      	lsrs	r3, r3, #9
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001668:	69b9      	ldr	r1, [r7, #24]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 ff49 	bl	8002502 <I2C_Slave_ADDR>
 8001670:	e066      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_I2C_EV_IRQHandler+0x218>
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	0a5b      	lsrs	r3, r3, #9
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 ff7e 	bl	800258c <I2C_Slave_STOPF>
 8001690:	e056      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	2b21      	cmp	r3, #33	; 0x21
 8001696:	d002      	beq.n	800169e <HAL_I2C_EV_IRQHandler+0x224>
 8001698:	7bbb      	ldrb	r3, [r7, #14]
 800169a:	2b29      	cmp	r3, #41	; 0x29
 800169c:	d125      	bne.n	80016ea <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	09db      	lsrs	r3, r3, #7
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00f      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x250>
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	0a9b      	lsrs	r3, r3, #10
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x250>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fe5f 	bl	8002386 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016c8:	e039      	b.n	800173e <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d033      	beq.n	800173e <HAL_I2C_EV_IRQHandler+0x2c4>
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	0a5b      	lsrs	r3, r3, #9
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d02d      	beq.n	800173e <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fe8c 	bl	8002400 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016e8:	e029      	b.n	800173e <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	099b      	lsrs	r3, r3, #6
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00f      	beq.n	8001716 <HAL_I2C_EV_IRQHandler+0x29c>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	0a9b      	lsrs	r3, r3, #10
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_I2C_EV_IRQHandler+0x29c>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fe97 	bl	8002442 <I2C_SlaveReceive_RXNE>
 8001714:	e014      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00e      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	0a5b      	lsrs	r3, r3, #9
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fec5 	bl	80024be <I2C_SlaveReceive_BTF>
 8001734:	e004      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800173e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b08a      	sub	sp, #40	; 0x28
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00e      	beq.n	800178c <HAL_I2C_ER_IRQHandler+0x46>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800178a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	0a5b      	lsrs	r3, r3, #9
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00e      	beq.n	80017b6 <HAL_I2C_ER_IRQHandler+0x70>
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80017b4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	0a9b      	lsrs	r3, r3, #10
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d041      	beq.n	8001846 <HAL_I2C_ER_IRQHandler+0x100>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03b      	beq.n	8001846 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80017d4:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017ec:	7efb      	ldrb	r3, [r7, #27]
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d112      	bne.n	8001818 <HAL_I2C_ER_IRQHandler+0xd2>
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10f      	bne.n	8001818 <HAL_I2C_ER_IRQHandler+0xd2>
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b21      	cmp	r3, #33	; 0x21
 80017fc:	d008      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	2b29      	cmp	r3, #41	; 0x29
 8001802:	d005      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0xca>
 8001804:	7cfb      	ldrb	r3, [r7, #19]
 8001806:	2b28      	cmp	r3, #40	; 0x28
 8001808:	d106      	bne.n	8001818 <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b21      	cmp	r3, #33	; 0x21
 800180e:	d103      	bne.n	8001818 <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 ffeb 	bl	80027ec <I2C_Slave_AF>
 8001816:	e016      	b.n	8001846 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001820:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b10      	cmp	r3, #16
 8001834:	d107      	bne.n	8001846 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001844:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	0adb      	lsrs	r3, r3, #11
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00e      	beq.n	8001870 <HAL_I2C_ER_IRQHandler+0x12a>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800186e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	2b00      	cmp	r3, #0
 8001874:	d008      	beq.n	8001888 <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f001 f822 	bl	80028cc <I2C_ITError>
  }
}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	4613      	mov	r3, r2
 80018ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001976:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	d150      	bne.n	8001a28 <I2C_MasterTransmit_TXE+0xc8>
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b21      	cmp	r3, #33	; 0x21
 800198a:	d14d      	bne.n	8001a28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b08      	cmp	r3, #8
 8001990:	d01d      	beq.n	80019ce <I2C_MasterTransmit_TXE+0x6e>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b20      	cmp	r3, #32
 8001996:	d01a      	beq.n	80019ce <I2C_MasterTransmit_TXE+0x6e>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800199e:	d016      	beq.n	80019ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2211      	movs	r2, #17
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff62 	bl	8001890 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019cc:	e0bc      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	d107      	bne.n	8001a18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff7d 	bl	8001910 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a16:	e097      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff35 	bl	8001890 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a26:	e08f      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b21      	cmp	r3, #33	; 0x21
 8001a2c:	d007      	beq.n	8001a3e <I2C_MasterTransmit_TXE+0xde>
 8001a2e:	7bbb      	ldrb	r3, [r7, #14]
 8001a30:	2b40      	cmp	r3, #64	; 0x40
 8001a32:	f040 8089 	bne.w	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b22      	cmp	r3, #34	; 0x22
 8001a3a:	f040 8085 	bne.w	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d108      	bne.n	8001a5a <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a56:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001a58:	e076      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b40      	cmp	r3, #64	; 0x40
 8001a64:	d15d      	bne.n	8001b22 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11d      	bne.n	8001aaa <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10b      	bne.n	8001a8e <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	1c9a      	adds	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001a8c:	e05c      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	121b      	asrs	r3, r3, #8
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001aa8:	e04e      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10b      	bne.n	8001aca <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ac8:	e03e      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d13a      	bne.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b22      	cmp	r3, #34	; 0x22
 8001adc:	d108      	bne.n	8001af0 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	e02b      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b21      	cmp	r3, #33	; 0x21
 8001afa:	d125      	bne.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b20:	e012      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001b46:	e7ff      	b.n	8001b48 <I2C_MasterTransmit_TXE+0x1e8>
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b21      	cmp	r3, #33	; 0x21
 8001b68:	d164      	bne.n	8001c34 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d012      	beq.n	8001b9a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001b98:	e04c      	b.n	8001c34 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d01d      	beq.n	8001bdc <I2C_MasterTransmit_BTF+0x8c>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d01a      	beq.n	8001bdc <I2C_MasterTransmit_BTF+0x8c>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bac:	d016      	beq.n	8001bdc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bbc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2211      	movs	r2, #17
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fe5b 	bl	8001890 <HAL_I2C_MasterTxCpltCallback>
}
 8001bda:	e02b      	b.n	8001c34 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d107      	bne.n	8001c26 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fe76 	bl	8001910 <HAL_I2C_MemTxCpltCallback>
}
 8001c24:	e006      	b.n	8001c34 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe2e 	bl	8001890 <HAL_I2C_MasterTxCpltCallback>
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b22      	cmp	r3, #34	; 0x22
 8001c4e:	d173      	bne.n	8001d38 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d920      	bls.n	8001ca0 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d154      	bne.n	8001d38 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c9e:	e04b      	b.n	8001d38 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d047      	beq.n	8001d38 <I2C_MasterReceive_RXNE+0xfc>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <I2C_MasterReceive_RXNE+0x78>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d141      	bne.n	8001d38 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cd2:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d10a      	bne.n	8001d24 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fe01 	bl	8001924 <HAL_I2C_MemRxCpltCallback>
}
 8001d22:	e009      	b.n	8001d38 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2212      	movs	r2, #18
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fdb6 	bl	80018a4 <HAL_I2C_MasterRxCpltCallback>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11b      	bne.n	8001d90 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691a      	ldr	r2, [r3, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d8e:	e0bd      	b.n	8001f0c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d129      	bne.n	8001dee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d00a      	beq.n	8001dc6 <I2C_MasterReceive_BTF+0x86>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d007      	beq.n	8001dc6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dec:	e08e      	b.n	8001f0c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d176      	bne.n	8001ee6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d002      	beq.n	8001e04 <I2C_MasterReceive_BTF+0xc4>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d108      	bne.n	8001e16 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e019      	b.n	8001e4a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d002      	beq.n	8001e22 <I2C_MasterReceive_BTF+0xe2>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d108      	bne.n	8001e34 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e00a      	b.n	8001e4a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b10      	cmp	r3, #16
 8001e38:	d007      	beq.n	8001e4a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001ea4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d10a      	bne.n	8001ed0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff fd2b 	bl	8001924 <HAL_I2C_MemRxCpltCallback>
}
 8001ece:	e01d      	b.n	8001f0c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2212      	movs	r2, #18
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fce0 	bl	80018a4 <HAL_I2C_MasterRxCpltCallback>
}
 8001ee4:	e012      	b.n	8001f0c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d117      	bne.n	8001f58 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f40:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001f42:	e05f      	b.n	8002004 <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	611a      	str	r2, [r3, #16]
}
 8001f56:	e055      	b.n	8002004 <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f60:	d12b      	bne.n	8001fba <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b21      	cmp	r3, #33	; 0x21
 8001f6c:	d109      	bne.n	8001f82 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	e008      	b.n	8001f94 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <I2C_Master_SB+0x94>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d02d      	beq.n	8002004 <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	605a      	str	r2, [r3, #4]
}
 8001fb8:	e024      	b.n	8002004 <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	11db      	asrs	r3, r3, #7
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f003 0306 	and.w	r3, r3, #6
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f063 030f 	orn	r3, r3, #15
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]
}
 8001fde:	e011      	b.n	8002004 <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d10d      	bne.n	8002004 <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	11db      	asrs	r3, r3, #7
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 0306 	and.w	r3, r3, #6
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f063 030e 	orn	r3, r3, #14
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	611a      	str	r2, [r3, #16]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	b2da      	uxtb	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <I2C_Master_ADD10+0x24>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	2b00      	cmp	r3, #0
 8002032:	d011      	beq.n	8002058 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <I2C_Master_ADD10+0x38>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002056:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002064:	b480      	push	{r7}
 8002066:	b091      	sub	sp, #68	; 0x44
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b22      	cmp	r3, #34	; 0x22
 800208c:	f040 8169 	bne.w	8002362 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10f      	bne.n	80020b8 <I2C_Master_ADDR+0x54>
 8002098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d10b      	bne.n	80020b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	e160      	b.n	800237a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d11d      	bne.n	80020fc <I2C_Master_ADDR+0x98>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020c8:	d118      	bne.n	80020fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	651a      	str	r2, [r3, #80]	; 0x50
 80020fa:	e13e      	b.n	800237a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d113      	bne.n	800212e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e115      	b.n	800235a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	f040 808a 	bne.w	800224e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002140:	d137      	bne.n	80021b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002160:	d113      	bne.n	800218a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002170:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	e0e7      	b.n	800235a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	623b      	str	r3, [r7, #32]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	623b      	str	r3, [r7, #32]
 800219e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e0d3      	b.n	800235a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d02e      	beq.n	8002216 <I2C_Master_ADDR+0x1b2>
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d02b      	beq.n	8002216 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d102      	bne.n	80021ca <I2C_Master_ADDR+0x166>
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d125      	bne.n	8002216 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00e      	beq.n	80021ee <I2C_Master_ADDR+0x18a>
 80021d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d00b      	beq.n	80021ee <I2C_Master_ADDR+0x18a>
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d008      	beq.n	80021ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e007      	b.n	80021fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	e0a1      	b.n	800235a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002224:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	61bb      	str	r3, [r7, #24]
 800223a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e085      	b.n	800235a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d14d      	bne.n	80022f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	2b04      	cmp	r3, #4
 800225c:	d016      	beq.n	800228c <I2C_Master_ADDR+0x228>
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	2b02      	cmp	r3, #2
 8002262:	d013      	beq.n	800228c <I2C_Master_ADDR+0x228>
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	2b10      	cmp	r3, #16
 8002268:	d010      	beq.n	800228c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002278:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800229a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022aa:	d117      	bne.n	80022dc <I2C_Master_ADDR+0x278>
 80022ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022b2:	d00b      	beq.n	80022cc <I2C_Master_ADDR+0x268>
 80022b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d008      	beq.n	80022cc <I2C_Master_ADDR+0x268>
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d005      	beq.n	80022cc <I2C_Master_ADDR+0x268>
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d002      	beq.n	80022cc <I2C_Master_ADDR+0x268>
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d107      	bne.n	80022dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	e032      	b.n	800235a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002302:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002312:	d117      	bne.n	8002344 <I2C_Master_ADDR+0x2e0>
 8002314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002316:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800231a:	d00b      	beq.n	8002334 <I2C_Master_ADDR+0x2d0>
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	2b01      	cmp	r3, #1
 8002320:	d008      	beq.n	8002334 <I2C_Master_ADDR+0x2d0>
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	2b08      	cmp	r3, #8
 8002326:	d005      	beq.n	8002334 <I2C_Master_ADDR+0x2d0>
 8002328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232a:	2b10      	cmp	r3, #16
 800232c:	d002      	beq.n	8002334 <I2C_Master_ADDR+0x2d0>
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	2b20      	cmp	r3, #32
 8002332:	d107      	bne.n	8002344 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002342:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002360:	e00b      	b.n	800237a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	e7ff      	b.n	800237a <I2C_Master_ADDR+0x316>
 800237a:	bf00      	nop
 800237c:	3744      	adds	r7, #68	; 0x44
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02b      	beq.n	80023f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d114      	bne.n	80023f8 <I2C_SlaveTransmit_TXE+0x72>
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b29      	cmp	r3, #41	; 0x29
 80023d2:	d111      	bne.n	80023f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2221      	movs	r2, #33	; 0x21
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2228      	movs	r2, #40	; 0x28
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fa60 	bl	80018b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d011      	beq.n	8002436 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02c      	beq.n	80024b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d114      	bne.n	80024b6 <I2C_SlaveReceive_RXNE+0x74>
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b2a      	cmp	r3, #42	; 0x2a
 8002490:	d111      	bne.n	80024b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2222      	movs	r2, #34	; 0x22
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2228      	movs	r2, #40	; 0x28
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fa0b 	bl	80018cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800251c:	2b28      	cmp	r3, #40	; 0x28
 800251e:	d127      	bne.n	8002570 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	09db      	lsrs	r3, r3, #7
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	81bb      	strh	r3, [r7, #12]
 8002552:	e002      	b.n	800255a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002562:	89ba      	ldrh	r2, [r7, #12]
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff f9b9 	bl	80018e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800256e:	e008      	b.n	8002582 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0202 	mvn.w	r2, #2
 8002578:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e8:	d172      	bne.n	80026d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b22      	cmp	r3, #34	; 0x22
 80025ee:	d002      	beq.n	80025f6 <I2C_Slave_STOPF+0x6a>
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b2a      	cmp	r3, #42	; 0x2a
 80025f4:	d135      	bne.n	8002662 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fd3b 	bl	80010aa <HAL_DMA_GetState>
 8002634:	4603      	mov	r3, r0
 8002636:	2b01      	cmp	r3, #1
 8002638:	d049      	beq.n	80026ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <I2C_Slave_STOPF+0x258>)
 8002640:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fd0d 	bl	8001066 <HAL_DMA_Abort_IT>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03d      	beq.n	80026ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800265c:	4610      	mov	r0, r2
 800265e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002660:	e035      	b.n	80026ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f043 0204 	orr.w	r2, r3, #4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002694:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fd05 	bl	80010aa <HAL_DMA_GetState>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d014      	beq.n	80026d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026aa:	4a4e      	ldr	r2, [pc, #312]	; (80027e4 <I2C_Slave_STOPF+0x258>)
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fcd7 	bl	8001066 <HAL_DMA_Abort_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c8:	4610      	mov	r0, r2
 80026ca:	4798      	blx	r3
 80026cc:	e000      	b.n	80026d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d03e      	beq.n	8002758 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d112      	bne.n	800270e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d112      	bne.n	8002742 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f8b3 	bl	80028cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002766:	e039      	b.n	80027dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b2a      	cmp	r3, #42	; 0x2a
 800276c:	d109      	bne.n	8002782 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2228      	movs	r2, #40	; 0x28
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff f8a5 	bl	80018cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b28      	cmp	r3, #40	; 0x28
 800278c:	d111      	bne.n	80027b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <I2C_Slave_STOPF+0x25c>)
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff f8a6 	bl	80018fc <HAL_I2C_ListenCpltCallback>
}
 80027b0:	e014      	b.n	80027dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	2b22      	cmp	r3, #34	; 0x22
 80027b8:	d002      	beq.n	80027c0 <I2C_Slave_STOPF+0x234>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b22      	cmp	r3, #34	; 0x22
 80027be:	d10d      	bne.n	80027dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff f878 	bl	80018cc <HAL_I2C_SlaveRxCpltCallback>
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	08002afd 	.word	0x08002afd
 80027e8:	ffff0000 	.word	0xffff0000

080027ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d002      	beq.n	800280e <I2C_Slave_AF+0x22>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b20      	cmp	r3, #32
 800280c:	d129      	bne.n	8002862 <I2C_Slave_AF+0x76>
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b28      	cmp	r3, #40	; 0x28
 8002812:	d126      	bne.n	8002862 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a2c      	ldr	r2, [pc, #176]	; (80028c8 <I2C_Slave_AF+0xdc>)
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002828:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002832:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff f84e 	bl	80018fc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002860:	e02e      	b.n	80028c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b21      	cmp	r3, #33	; 0x21
 8002866:	d126      	bne.n	80028b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <I2C_Slave_AF+0xdc>)
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2221      	movs	r2, #33	; 0x21
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002892:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800289c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff f802 	bl	80018b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80028b4:	e004      	b.n	80028c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028be:	615a      	str	r2, [r3, #20]
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	ffff0000 	.word	0xffff0000

080028cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d10a      	bne.n	80028fe <I2C_ITError+0x32>
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	2b22      	cmp	r3, #34	; 0x22
 80028ec:	d107      	bne.n	80028fe <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002904:	2b28      	cmp	r3, #40	; 0x28
 8002906:	d107      	bne.n	8002918 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2228      	movs	r2, #40	; 0x28
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002916:	e015      	b.n	8002944 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002926:	d006      	beq.n	8002936 <I2C_ITError+0x6a>
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b60      	cmp	r3, #96	; 0x60
 800292c:	d003      	beq.n	8002936 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002952:	d162      	bne.n	8002a1a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002962:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d020      	beq.n	80029b4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	4a5f      	ldr	r2, [pc, #380]	; (8002af4 <I2C_ITError+0x228>)
 8002978:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fb71 	bl	8001066 <HAL_DMA_Abort_IT>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8089 	beq.w	8002a9e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ae:	4610      	mov	r0, r2
 80029b0:	4798      	blx	r3
 80029b2:	e074      	b.n	8002a9e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <I2C_ITError+0x228>)
 80029ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fb50 	bl	8001066 <HAL_DMA_Abort_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d068      	beq.n	8002a9e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d10b      	bne.n	80029f2 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a14:	4610      	mov	r0, r2
 8002a16:	4798      	blx	r3
 8002a18:	e041      	b.n	8002a9e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b60      	cmp	r3, #96	; 0x60
 8002a24:	d125      	bne.n	8002a72 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3e:	2b40      	cmp	r3, #64	; 0x40
 8002a40:	d10b      	bne.n	8002a5a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe ff6e 	bl	800194c <HAL_I2C_AbortCpltCallback>
 8002a70:	e015      	b.n	8002a9e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d10b      	bne.n	8002a98 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fe ff4d 	bl	8001938 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d11b      	bne.n	8002aea <I2C_ITError+0x21e>
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b28      	cmp	r3, #40	; 0x28
 8002ab6:	d118      	bne.n	8002aea <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ac6:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <I2C_ITError+0x22c>)
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7fe ff09 	bl	80018fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08002afd 	.word	0x08002afd
 8002af8:	ffff0000 	.word	0xffff0000

08002afc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b10:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	2200      	movs	r2, #0
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	2200      	movs	r2, #0
 8002b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	2200      	movs	r2, #0
 8002b46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d10e      	bne.n	8002b82 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f7fe fee6 	bl	800194c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b80:	e027      	b.n	8002bd2 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b88:	2b28      	cmp	r3, #40	; 0x28
 8002b8a:	d117      	bne.n	8002bbc <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002baa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2228      	movs	r2, #40	; 0x28
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bba:	e007      	b.n	8002bcc <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f7fe feb3 	bl	8001938 <HAL_I2C_ErrorCallback>
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002bea:	d103      	bne.n	8002bf4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bf2:	e007      	b.n	8002c04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002bfc:	d102      	bne.n	8002c04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2208      	movs	r2, #8
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e22a      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d075      	beq.n	8002d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2e:	4b88      	ldr	r3, [pc, #544]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4b85      	ldr	r3, [pc, #532]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d112      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c46:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c52:	d10b      	bne.n	8002c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c54:	4b7e      	ldr	r3, [pc, #504]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05b      	beq.n	8002d18 <HAL_RCC_OscConfig+0x108>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d157      	bne.n	8002d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e205      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x74>
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a75      	ldr	r2, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e01d      	b.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x98>
 8002c8e:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6c      	ldr	r2, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002ca8:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f88c 	bl	8000de4 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe f888 	bl	8000de4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1ca      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xc0>
 8002cee:	e014      	b.n	8002d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f878 	bl	8000de4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe f874 	bl	8000de4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1b6      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xe8>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d063      	beq.n	8002dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d11c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3e:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4a:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x152>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e18a      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	e03a      	b.n	8002dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_OscConfig+0x244>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe f82d 	bl	8000de4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe f829 	bl	8000de4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e16b      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4925      	ldr	r1, [pc, #148]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x244>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f80c 	bl	8000de4 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe f808 	bl	8000de4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e14a      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d036      	beq.n	8002e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d016      	beq.n	8002e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_RCC_OscConfig+0x248>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fd ffec 	bl	8000de4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fd ffe8 	bl	8000de4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e12a      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_OscConfig+0x240>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x200>
 8002e2e:	e01b      	b.n	8002e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_OscConfig+0x248>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fd ffd5 	bl	8000de4 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	e00e      	b.n	8002e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fd ffd1 	bl	8000de4 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d907      	bls.n	8002e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e113      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
 8002e50:	40023800 	.word	0x40023800
 8002e54:	42470000 	.word	0x42470000
 8002e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ea      	bne.n	8002e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 8097 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7a:	4b81      	ldr	r3, [pc, #516]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10f      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b7d      	ldr	r3, [pc, #500]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	4a7c      	ldr	r2, [pc, #496]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e94:	6413      	str	r3, [r2, #64]	; 0x40
 8002e96:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b77      	ldr	r3, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b74      	ldr	r3, [pc, #464]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a73      	ldr	r2, [pc, #460]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7fd ff91 	bl	8000de4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fd ff8d 	bl	8000de4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0cf      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_OscConfig+0x474>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x2ea>
 8002eec:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a63      	ldr	r2, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x324>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x30c>
 8002f02:	4b5f      	ldr	r3, [pc, #380]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a5e      	ldr	r2, [pc, #376]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a5b      	ldr	r2, [pc, #364]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0x324>
 8002f1c:	4b58      	ldr	r3, [pc, #352]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a57      	ldr	r2, [pc, #348]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b55      	ldr	r3, [pc, #340]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	f023 0304 	bic.w	r3, r3, #4
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fd ff52 	bl	8000de4 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fd ff4e 	bl	8000de4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e08e      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0ee      	beq.n	8002f44 <HAL_RCC_OscConfig+0x334>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fd ff3c 	bl	8000de4 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f7fd ff38 	bl	8000de4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e078      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f86:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ee      	bne.n	8002f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4a38      	ldr	r2, [pc, #224]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d064      	beq.n	8003076 <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d05c      	beq.n	8003072 <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d141      	bne.n	8003044 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_RCC_OscConfig+0x478>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fd ff0d 	bl	8000de4 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fd ff09 	bl	8000de4 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e04b      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	019b      	lsls	r3, r3, #6
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	491b      	ldr	r1, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_OscConfig+0x478>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fd fee2 	bl	8000de4 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fede 	bl	8000de4 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e020      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x414>
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x478>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fd fecb 	bl	8000de4 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003052:	f7fd fec7 	bl	8000de4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e009      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x470>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x442>
 8003070:	e001      	b.n	8003076 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	40007000 	.word	0x40007000
 8003088:	42470060 	.word	0x42470060

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0ca      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b67      	ldr	r3, [pc, #412]	; (8003240 <HAL_RCC_ClockConfig+0x1b4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d90c      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b64      	ldr	r3, [pc, #400]	; (8003240 <HAL_RCC_ClockConfig+0x1b4>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b62      	ldr	r3, [pc, #392]	; (8003240 <HAL_RCC_ClockConfig+0x1b4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b6      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b58      	ldr	r3, [pc, #352]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a57      	ldr	r2, [pc, #348]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b52      	ldr	r3, [pc, #328]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494c      	ldr	r1, [pc, #304]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b46      	ldr	r3, [pc, #280]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07d      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06d      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e065      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4933      	ldr	r1, [pc, #204]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fd fe32 	bl	8000de4 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fd fe2e 	bl	8000de4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04d      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_ClockConfig+0x1b4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d20c      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <HAL_RCC_ClockConfig+0x1b4>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <HAL_RCC_ClockConfig+0x1b4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e030      	b.n	8003236 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4915      	ldr	r1, [pc, #84]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490d      	ldr	r1, [pc, #52]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f81d 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4909      	ldr	r1, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800322e:	200f      	movs	r0, #15
 8003230:	f7fd fd94 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	08006390 	.word	0x08006390
 800324c:	20000008 	.word	0x20000008

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b094      	sub	sp, #80	; 0x50
 8003256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	647b      	str	r3, [r7, #68]	; 0x44
 800325c:	2300      	movs	r3, #0
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003260:	2300      	movs	r3, #0
 8003262:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003268:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x40>
 8003274:	2b08      	cmp	r3, #8
 8003276:	f200 80e1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x1ec>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 800327e:	2b04      	cmp	r3, #4
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x3a>
 8003282:	e0db      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003284:	4b73      	ldr	r3, [pc, #460]	; (8003454 <HAL_RCC_GetSysClockFreq+0x204>)
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003288:	e0db      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800328a:	4b73      	ldr	r3, [pc, #460]	; (8003458 <HAL_RCC_GetSysClockFreq+0x208>)
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800328e:	e0d8      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800329a:	4b6d      	ldr	r3, [pc, #436]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d063      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	099b      	lsrs	r3, r3, #6
 80032ac:	2200      	movs	r2, #0
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ba:	2300      	movs	r3, #0
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	f04f 0000 	mov.w	r0, #0
 80032ca:	f04f 0100 	mov.w	r1, #0
 80032ce:	0159      	lsls	r1, r3, #5
 80032d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032d4:	0150      	lsls	r0, r2, #5
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4621      	mov	r1, r4
 80032dc:	1a51      	subs	r1, r2, r1
 80032de:	6139      	str	r1, [r7, #16]
 80032e0:	4629      	mov	r1, r5
 80032e2:	eb63 0301 	sbc.w	r3, r3, r1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f4:	4659      	mov	r1, fp
 80032f6:	018b      	lsls	r3, r1, #6
 80032f8:	4651      	mov	r1, sl
 80032fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032fe:	4651      	mov	r1, sl
 8003300:	018a      	lsls	r2, r1, #6
 8003302:	4651      	mov	r1, sl
 8003304:	ebb2 0801 	subs.w	r8, r2, r1
 8003308:	4659      	mov	r1, fp
 800330a:	eb63 0901 	sbc.w	r9, r3, r1
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800331a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003322:	4690      	mov	r8, r2
 8003324:	4699      	mov	r9, r3
 8003326:	4623      	mov	r3, r4
 8003328:	eb18 0303 	adds.w	r3, r8, r3
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	462b      	mov	r3, r5
 8003330:	eb49 0303 	adc.w	r3, r9, r3
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003342:	4629      	mov	r1, r5
 8003344:	024b      	lsls	r3, r1, #9
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334c:	4621      	mov	r1, r4
 800334e:	024a      	lsls	r2, r1, #9
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
 800335a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003360:	f7fd fb58 	bl	8000a14 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	e058      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b38      	ldr	r3, [pc, #224]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	2200      	movs	r2, #0
 8003376:	4618      	mov	r0, r3
 8003378:	4611      	mov	r1, r2
 800337a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
 8003384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003388:	4642      	mov	r2, r8
 800338a:	464b      	mov	r3, r9
 800338c:	f04f 0000 	mov.w	r0, #0
 8003390:	f04f 0100 	mov.w	r1, #0
 8003394:	0159      	lsls	r1, r3, #5
 8003396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339a:	0150      	lsls	r0, r2, #5
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4641      	mov	r1, r8
 80033a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033c0:	ebb2 040a 	subs.w	r4, r2, sl
 80033c4:	eb63 050b 	sbc.w	r5, r3, fp
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	00eb      	lsls	r3, r5, #3
 80033d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d6:	00e2      	lsls	r2, r4, #3
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	4643      	mov	r3, r8
 80033de:	18e3      	adds	r3, r4, r3
 80033e0:	603b      	str	r3, [r7, #0]
 80033e2:	464b      	mov	r3, r9
 80033e4:	eb45 0303 	adc.w	r3, r5, r3
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f6:	4629      	mov	r1, r5
 80033f8:	028b      	lsls	r3, r1, #10
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003400:	4621      	mov	r1, r4
 8003402:	028a      	lsls	r2, r1, #10
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	61fa      	str	r2, [r7, #28]
 8003410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003414:	f7fd fafe 	bl	8000a14 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x200>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetSysClockFreq+0x204>)
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003444:	4618      	mov	r0, r3
 8003446:	3750      	adds	r7, #80	; 0x50
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000008 	.word	0x20000008

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	080063a0 	.word	0x080063a0

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffdc 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	0b5b      	lsrs	r3, r3, #13
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	080063a0 	.word	0x080063a0

080034c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0202 	mvn.w	r2, #2
 80034f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8f8 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8ea 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f8fb 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0204 	mvn.w	r2, #4
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8ce 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8c0 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8d1 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b08      	cmp	r3, #8
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0208 	mvn.w	r2, #8
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2204      	movs	r2, #4
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8a4 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f896 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8a7 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d122      	bne.n	800361c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d11b      	bne.n	800361c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0210 	mvn.w	r2, #16
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2208      	movs	r2, #8
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f87a 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f86c 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f87d 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0201 	mvn.w	r2, #1
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f846 	bl	80036d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f86c 	bl	800374c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d10e      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d107      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f842 	bl	8003724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0220 	mvn.w	r2, #32
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f836 	bl	8003738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e03f      	b.n	80037f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f837 	bl	80037fa <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fb9b 	bl	8003ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b088      	sub	sp, #32
 8003812:	af02      	add	r7, sp, #8
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	603b      	str	r3, [r7, #0]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b20      	cmp	r3, #32
 800382c:	f040 8083 	bne.w	8003936 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Transmit+0x2e>
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e07b      	b.n	8003938 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_UART_Transmit+0x40>
 800384a:	2302      	movs	r3, #2
 800384c:	e074      	b.n	8003938 <HAL_UART_Transmit+0x12a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2221      	movs	r2, #33	; 0x21
 8003860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003864:	f7fd fabe 	bl	8000de4 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	88fa      	ldrh	r2, [r7, #6]
 800386e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003876:	e042      	b.n	80038fe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d122      	bne.n	80038d6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9b4 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e046      	b.n	8003938 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3302      	adds	r3, #2
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	e017      	b.n	80038fe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e013      	b.n	80038fe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f991 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e023      	b.n	8003938 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1b7      	bne.n	8003878 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f978 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e00a      	b.n	8003938 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003936:	2302      	movs	r3, #2
  }
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b20      	cmp	r3, #32
 8003958:	d140      	bne.n	80039dc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_Receive_IT+0x26>
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e039      	b.n	80039de <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_UART_Receive_IT+0x38>
 8003974:	2302      	movs	r3, #2
 8003976:	e032      	b.n	80039de <HAL_UART_Receive_IT+0x9e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2222      	movs	r2, #34	; 0x22
 800399c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0220 	orr.w	r2, r2, #32
 80039d6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	e000      	b.n	80039de <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
  }
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10d      	bne.n	8003a3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_UART_IRQHandler+0x52>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9d0 	bl	8003ddc <UART_Receive_IT>
      return;
 8003a3c:	e0cb      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80ab 	beq.w	8003b9c <HAL_UART_IRQHandler+0x1b0>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_UART_IRQHandler+0x70>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80a0 	beq.w	8003b9c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_UART_IRQHandler+0x90>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_UART_IRQHandler+0xb0>
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a94:	f043 0202 	orr.w	r2, r3, #2
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_UART_IRQHandler+0xd0>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_UART_IRQHandler+0xf0>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad4:	f043 0208 	orr.w	r2, r3, #8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d077      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_UART_IRQHandler+0x112>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f96f 	bl	8003ddc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b40      	cmp	r3, #64	; 0x40
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d102      	bne.n	8003b26 <HAL_UART_IRQHandler+0x13a>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d031      	beq.n	8003b8a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8b8 	bl	8003c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d123      	bne.n	8003b82 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d013      	beq.n	8003b7a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4a21      	ldr	r2, [pc, #132]	; (8003bdc <HAL_UART_IRQHandler+0x1f0>)
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd fa81 	bl	8001066 <HAL_DMA_Abort_IT>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b74:	4610      	mov	r0, r2
 8003b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	e00e      	b.n	8003b98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f83a 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	e00a      	b.n	8003b98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f836 	bl	8003bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	e006      	b.n	8003b98 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f832 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b96:	e01d      	b.n	8003bd4 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	bf00      	nop
    return;
 8003b9a:	e01b      	b.n	8003bd4 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x1cc>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8a5 	bl	8003d00 <UART_Transmit_IT>
    return;
 8003bb6:	e00e      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x1ea>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f8ed 	bl	8003dac <UART_EndTransmit_IT>
    return;
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_IRQHandler+0x1ea>
    return;
 8003bd4:	bf00      	nop
  }
}
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	08003cd9 	.word	0x08003cd9

08003be0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	e02c      	b.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c20:	d028      	beq.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c28:	f7fd f8dc 	bl	8000de4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d21d      	bcs.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e00f      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d0c3      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ff7e 	bl	8003bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b21      	cmp	r3, #33	; 0x21
 8003d12:	d144      	bne.n	8003d9e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d11a      	bne.n	8003d54 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d32:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]
 8003d46:	e00e      	b.n	8003d66 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]
 8003d52:	e008      	b.n	8003d66 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6211      	str	r1, [r2, #32]
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4619      	mov	r1, r3
 8003d74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff07 	bl	8003be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b22      	cmp	r3, #34	; 0x22
 8003dee:	d171      	bne.n	8003ed4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df8:	d123      	bne.n	8003e42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
 8003e24:	e029      	b.n	8003e7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e40:	e01b      	b.n	8003e7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6858      	ldr	r0, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	1c59      	adds	r1, r3, #1
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6291      	str	r1, [r2, #40]	; 0x28
 8003e5a:	b2c2      	uxtb	r2, r0
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	e00c      	b.n	8003e7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	1c58      	adds	r0, r3, #1
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	6288      	str	r0, [r1, #40]	; 0x28
 8003e72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4619      	mov	r1, r3
 8003e88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d120      	bne.n	8003ed0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0220 	bic.w	r2, r2, #32
 8003e9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f001 fc44 	bl	8005754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e002      	b.n	8003ed6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e000      	b.n	8003ed6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003ed4:	2302      	movs	r3, #2
  }
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f20:	f023 030c 	bic.w	r3, r3, #12
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	68f9      	ldr	r1, [r7, #12]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	f040 80e4 	bne.w	8004118 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4aab      	ldr	r2, [pc, #684]	; (8004204 <UART_SetConfig+0x324>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <UART_SetConfig+0x84>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4aaa      	ldr	r2, [pc, #680]	; (8004208 <UART_SetConfig+0x328>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d16c      	bne.n	800403e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f64:	f7ff fa9a 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	4aa3      	ldr	r2, [pc, #652]	; (800420c <UART_SetConfig+0x32c>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	011c      	lsls	r4, r3, #4
 8003f88:	f7ff fa88 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009a      	lsls	r2, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fa2:	f7ff fa7b 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009a      	lsls	r2, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	4a93      	ldr	r2, [pc, #588]	; (800420c <UART_SetConfig+0x32c>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2264      	movs	r2, #100	; 0x64
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	1aeb      	subs	r3, r5, r3
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	3332      	adds	r3, #50	; 0x32
 8003fd0:	4a8e      	ldr	r2, [pc, #568]	; (800420c <UART_SetConfig+0x32c>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fde:	441c      	add	r4, r3
 8003fe0:	f7ff fa5c 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009a      	lsls	r2, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ffa:	f7ff fa4f 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009a      	lsls	r2, r3, #2
 8004008:	441a      	add	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	4a7d      	ldr	r2, [pc, #500]	; (800420c <UART_SetConfig+0x32c>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2264      	movs	r2, #100	; 0x64
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	1aeb      	subs	r3, r5, r3
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	3332      	adds	r3, #50	; 0x32
 8004028:	4a78      	ldr	r2, [pc, #480]	; (800420c <UART_SetConfig+0x32c>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 0207 	and.w	r2, r3, #7
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4422      	add	r2, r4
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e154      	b.n	80042e8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800403e:	f7ff fa19 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004042:	4602      	mov	r2, r0
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	441a      	add	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	4a6c      	ldr	r2, [pc, #432]	; (800420c <UART_SetConfig+0x32c>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	011c      	lsls	r4, r3, #4
 8004062:	f7ff fa07 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004066:	4602      	mov	r2, r0
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009a      	lsls	r2, r3, #2
 8004070:	441a      	add	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fbb2 f5f3 	udiv	r5, r2, r3
 800407c:	f7ff f9fa 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004080:	4602      	mov	r2, r0
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4a5d      	ldr	r2, [pc, #372]	; (800420c <UART_SetConfig+0x32c>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2264      	movs	r2, #100	; 0x64
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	1aeb      	subs	r3, r5, r3
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	3332      	adds	r3, #50	; 0x32
 80040aa:	4a58      	ldr	r2, [pc, #352]	; (800420c <UART_SetConfig+0x32c>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040b8:	441c      	add	r4, r3
 80040ba:	f7ff f9db 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80040d4:	f7ff f9ce 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	009a      	lsls	r2, r3, #2
 80040e2:	441a      	add	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4a47      	ldr	r2, [pc, #284]	; (800420c <UART_SetConfig+0x32c>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2264      	movs	r2, #100	; 0x64
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	1aeb      	subs	r3, r5, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a42      	ldr	r2, [pc, #264]	; (800420c <UART_SetConfig+0x32c>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	f003 0207 	and.w	r2, r3, #7
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4422      	add	r2, r4
 8004114:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004116:	e0e7      	b.n	80042e8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a39      	ldr	r2, [pc, #228]	; (8004204 <UART_SetConfig+0x324>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <UART_SetConfig+0x24c>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a38      	ldr	r2, [pc, #224]	; (8004208 <UART_SetConfig+0x328>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d171      	bne.n	8004210 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800412c:	f7ff f9b6 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8004130:	4602      	mov	r2, r0
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009a      	lsls	r2, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	4a31      	ldr	r2, [pc, #196]	; (800420c <UART_SetConfig+0x32c>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	011c      	lsls	r4, r3, #4
 8004150:	f7ff f9a4 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 8004154:	4602      	mov	r2, r0
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	009a      	lsls	r2, r3, #2
 800415e:	441a      	add	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	fbb2 f5f3 	udiv	r5, r2, r3
 800416a:	f7ff f997 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 800416e:	4602      	mov	r2, r0
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009a      	lsls	r2, r3, #2
 8004178:	441a      	add	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	4a21      	ldr	r2, [pc, #132]	; (800420c <UART_SetConfig+0x32c>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2264      	movs	r2, #100	; 0x64
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	1aeb      	subs	r3, r5, r3
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	3332      	adds	r3, #50	; 0x32
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <UART_SetConfig+0x32c>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a4:	441c      	add	r4, r3
 80041a6:	f7ff f979 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009a      	lsls	r2, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80041c0:	f7ff f96c 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009a      	lsls	r2, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <UART_SetConfig+0x32c>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	2264      	movs	r2, #100	; 0x64
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	1aeb      	subs	r3, r5, r3
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	3332      	adds	r3, #50	; 0x32
 80041ee:	4a07      	ldr	r2, [pc, #28]	; (800420c <UART_SetConfig+0x32c>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4422      	add	r2, r4
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	e071      	b.n	80042e8 <UART_SetConfig+0x408>
 8004204:	40011000 	.word	0x40011000
 8004208:	40011400 	.word	0x40011400
 800420c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004210:	f7ff f930 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004214:	4602      	mov	r2, r0
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009a      	lsls	r2, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4a31      	ldr	r2, [pc, #196]	; (80042f0 <UART_SetConfig+0x410>)
 800422c:	fba2 2303 	umull	r2, r3, r2, r3
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	011c      	lsls	r4, r3, #4
 8004234:	f7ff f91e 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004238:	4602      	mov	r2, r0
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009a      	lsls	r2, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	fbb2 f5f3 	udiv	r5, r2, r3
 800424e:	f7ff f911 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8004252:	4602      	mov	r2, r0
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009a      	lsls	r2, r3, #2
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <UART_SetConfig+0x410>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2264      	movs	r2, #100	; 0x64
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	1aeb      	subs	r3, r5, r3
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	3332      	adds	r3, #50	; 0x32
 800427c:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <UART_SetConfig+0x410>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004288:	441c      	add	r4, r3
 800428a:	f7ff f8f3 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 800428e:	4602      	mov	r2, r0
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	009a      	lsls	r2, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80042a4:	f7ff f8e6 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	009a      	lsls	r2, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <UART_SetConfig+0x410>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2264      	movs	r2, #100	; 0x64
 80042c8:	fb02 f303 	mul.w	r3, r2, r3
 80042cc:	1aeb      	subs	r3, r5, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <UART_SetConfig+0x410>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 020f 	and.w	r2, r3, #15
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4422      	add	r2, r4
 80042e4:	609a      	str	r2, [r3, #8]
}
 80042e6:	e7ff      	b.n	80042e8 <UART_SetConfig+0x408>
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bdb0      	pop	{r4, r5, r7, pc}
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <SystemClock_Config>:
#include "SystemClock.h"

HAL_StatusTypeDef SystemClock_Config(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b094      	sub	sp, #80	; 0x50
 80042f8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef status;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <SystemClock_Config+0xa8>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a26      	ldr	r2, [pc, #152]	; (800439c <SystemClock_Config+0xa8>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b24      	ldr	r3, [pc, #144]	; (800439c <SystemClock_Config+0xa8>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	687b      	ldr	r3, [r7, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004316:	2300      	movs	r3, #0
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <SystemClock_Config+0xac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004322:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <SystemClock_Config+0xac>)
 8004324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <SystemClock_Config+0xac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	683b      	ldr	r3, [r7, #0]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004336:	2302      	movs	r3, #2
 8004338:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800433a:	2301      	movs	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800433e:	2310      	movs	r3, #16
 8004340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004342:	2302      	movs	r3, #2
 8004344:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 16;
 800434a:	2310      	movs	r3, #16
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
 800434e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004354:	2304      	movs	r3, #4
 8004356:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004358:	2307      	movs	r3, #7
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
  status = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800435c:	f107 0308 	add.w	r3, r7, #8
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fc55 	bl	8002c10 <HAL_RCC_OscConfig>
 8004366:	4603      	mov	r3, r0
 8004368:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800436c:	230f      	movs	r3, #15
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004370:	2302      	movs	r3, #2
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004374:	2300      	movs	r3, #0
 8004376:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800437e:	2300      	movs	r3, #0
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004382:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004386:	2102      	movs	r1, #2
 8004388:	4618      	mov	r0, r3
 800438a:	f7fe fe7f 	bl	800308c <HAL_RCC_ClockConfig>

  return status;
 800438e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 8004392:	4618      	mov	r0, r3
 8004394:	3750      	adds	r7, #80	; 0x50
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800
 80043a0:	40007000 	.word	0x40007000

080043a4 <process_command_data>:
#include <stddef.h> // Include for NULL definition

static int vitess_send = 0;
static char last_command = '\0';

char process_command_data(uint8_t* buffer) {
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
    if (buffer != NULL) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d015      	beq.n	80043de <process_command_data+0x3a>
        char first_char = (char)buffer[0];
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	73fb      	strb	r3, [r7, #15]
        // Check if the first character is 'v' command to change vitess
        if(first_char == 'v') {
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b76      	cmp	r3, #118	; 0x76
 80043bc:	d108      	bne.n	80043d0 <process_command_data+0x2c>
            // Check if there is a previous command stored
            if(last_command != '\0') {
 80043be:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <process_command_data+0x48>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <process_command_data+0x28>
                return last_command; // Return the last command without change
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <process_command_data+0x48>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	e009      	b.n	80043e0 <process_command_data+0x3c>
            } else {
                return '\0'; // Return null character if there is no previous command
 80043cc:	2300      	movs	r3, #0
 80043ce:	e007      	b.n	80043e0 <process_command_data+0x3c>
            }
        } else {
            last_command = (char)buffer[0]; // Store the new command
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <process_command_data+0x48>)
 80043d6:	701a      	strb	r2, [r3, #0]
            return last_command; // Return the new command
 80043d8:	4b04      	ldr	r3, [pc, #16]	; (80043ec <process_command_data+0x48>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	e000      	b.n	80043e0 <process_command_data+0x3c>
        }
    }
    return '\0'; // Return null character if buffer is empty or for other conditions
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	20000040 	.word	0x20000040

080043f0 <process_vitess_data>:

int process_vitess_data(uint8_t* buffer) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    if (buffer != NULL) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <process_vitess_data+0x3a>
        int i = 0; // Start from index 0
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
        vitess_send = 0; // Reset the vitess value
 8004402:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <process_vitess_data+0x48>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
        // Process data until encountering null character ('\0')
        while (buffer[i] != '\0') {
 8004408:	e009      	b.n	800441e <process_vitess_data+0x2e>
            get_vitess(buffer[i]); // Process each character to calculate vitess
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f812 	bl	800443c <get_vitess>
            i++; // Move to the next character
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
        while (buffer[i] != '\0') {
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ef      	bne.n	800440a <process_vitess_data+0x1a>
        }
    }
    return vitess_send; // Return the calculated vitess value
 800442a:	4b03      	ldr	r3, [pc, #12]	; (8004438 <process_vitess_data+0x48>)
 800442c:	681b      	ldr	r3, [r3, #0]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	2000003c 	.word	0x2000003c

0800443c <get_vitess>:

void get_vitess(char c) {
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
    // Logic to process character for vitess
    if (c >= '0' && c <= '9') {
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b2f      	cmp	r3, #47	; 0x2f
 800444a:	d90e      	bls.n	800446a <get_vitess+0x2e>
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	2b39      	cmp	r3, #57	; 0x39
 8004450:	d80b      	bhi.n	800446a <get_vitess+0x2e>
        vitess_send = vitess_send * 10 + (c - '0'); // Convert character to integer and update vitess value
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <get_vitess+0x3c>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	461a      	mov	r2, r3
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	3b30      	subs	r3, #48	; 0x30
 8004464:	4413      	add	r3, r2
 8004466:	4a04      	ldr	r2, [pc, #16]	; (8004478 <get_vitess+0x3c>)
 8004468:	6013      	str	r3, [r2, #0]
    }
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	2000003c 	.word	0x2000003c

0800447c <dxl_getPresentVelocity>:
	}
}

//==============================================================
int32_t dxl_getPresentVelocity(int id)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af04      	add	r7, sp, #16
 8004482:	6078      	str	r0, [r7, #4]
	dxl_sendPacket(id, INST_READ, 4, DXL_BYTE_1(XL_PRESENT_VELOCITY),DXL_BYTE_2(XL_PRESENT_VELOCITY), 0x04,0x00 );
 8004484:	2300      	movs	r3, #0
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	2304      	movs	r3, #4
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	2300      	movs	r3, #0
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	2204      	movs	r2, #4
 8004494:	2102      	movs	r1, #2
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f88c 	bl	80045b4 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 800449c:	200a      	movs	r0, #10
 800449e:	f7fc fcad 	bl	8000dfc <HAL_Delay>
	dxl_readPacket();
 80044a2:	f000 f99f 	bl	80047e4 <dxl_readPacket>
	if(param[0]==0x00){
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <dxl_getPresentVelocity+0x5c>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10e      	bne.n	80044cc <dxl_getPresentVelocity+0x50>
		return (uint32_t)param[4]<<24 | (uint32_t)param[3]<<16 | (uint32_t)param[2]<<8 | (uint32_t)param[1];
 80044ae:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <dxl_getPresentVelocity+0x5c>)
 80044b0:	791b      	ldrb	r3, [r3, #4]
 80044b2:	061a      	lsls	r2, r3, #24
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <dxl_getPresentVelocity+0x5c>)
 80044b6:	78db      	ldrb	r3, [r3, #3]
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	431a      	orrs	r2, r3
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <dxl_getPresentVelocity+0x5c>)
 80044be:	789b      	ldrb	r3, [r3, #2]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	4313      	orrs	r3, r2
 80044c4:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <dxl_getPresentVelocity+0x5c>)
 80044c6:	7852      	ldrb	r2, [r2, #1]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	e001      	b.n	80044d0 <dxl_getPresentVelocity+0x54>
	}
	else {
		return -1 ;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000088 	.word	0x20000088

080044dc <dxl_LED>:
    HAL_Delay(DXL_DELAY);
#endif
}
//==============================================================
void dxl_LED(int id, char val )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_LED), DXL_BYTE_2(XL_LED), val );
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	2300      	movs	r3, #0
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2341      	movs	r3, #65	; 0x41
 80044f2:	2203      	movs	r2, #3
 80044f4:	2103      	movs	r1, #3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f85c 	bl	80045b4 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 80044fc:	200a      	movs	r0, #10
 80044fe:	f7fc fc7d 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <dxl_torque>:
//==============================================================
void dxl_torque(int id, char val)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af02      	add	r7, sp, #8
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_TORQUE), DXL_BYTE_2(XL_TORQUE), val );
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	2340      	movs	r3, #64	; 0x40
 8004520:	2203      	movs	r2, #3
 8004522:	2103      	movs	r1, #3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f845 	bl	80045b4 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 800452a:	200a      	movs	r0, #10
 800452c:	f7fc fc66 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <dxl_setOperatingMode>:
//==============================================================
void dxl_setOperatingMode(int id, char val)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af02      	add	r7, sp, #8
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_OPERATING_MODE), DXL_BYTE_2(XL_OPERATING_MODE), val );
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	2300      	movs	r3, #0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	230b      	movs	r3, #11
 800454e:	2203      	movs	r2, #3
 8004550:	2103      	movs	r1, #3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f82e 	bl	80045b4 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004558:	200a      	movs	r0, #10
 800455a:	f7fc fc4f 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <dxl_setGoalVelocity>:
#endif
}

//==============================================================
void dxl_setGoalVelocity(int id, int val)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af06      	add	r7, sp, #24
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004574:	461a      	mov	r2, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 800457c:	4619      	mov	r1, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004584:	4618      	mov	r0, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	9003      	str	r0, [sp, #12]
 8004590:	9102      	str	r1, [sp, #8]
 8004592:	9201      	str	r2, [sp, #4]
 8004594:	2300      	movs	r3, #0
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	2368      	movs	r3, #104	; 0x68
 800459a:	2206      	movs	r2, #6
 800459c:	2103      	movs	r1, #3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f808 	bl	80045b4 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 80045a4:	200a      	movs	r0, #10
 80045a6:	f7fc fc29 	bl	8000dfc <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <dxl_sendPacket>:
	HAL_Delay(DXL_DELAY);
#endif
}
//==============================================================
int dxl_sendPacket(int id, int instruction, int parameter_data_size, ...)
{
 80045b4:	b40c      	push	{r2, r3}
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b094      	sub	sp, #80	; 0x50
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
	uint8_t frame_to_write[50];
	uint16_t crc;
	uint32_t length=3+parameter_data_size;
 80045c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045c2:	3303      	adds	r3, #3
 80045c4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t arg;

	frame_to_write[0] = 0xFF;
 80045c6:	23ff      	movs	r3, #255	; 0xff
 80045c8:	743b      	strb	r3, [r7, #16]
	frame_to_write[1] = 0xFF;
 80045ca:	23ff      	movs	r3, #255	; 0xff
 80045cc:	747b      	strb	r3, [r7, #17]
	frame_to_write[2] = 0xFD;
 80045ce:	23fd      	movs	r3, #253	; 0xfd
 80045d0:	74bb      	strb	r3, [r7, #18]
	frame_to_write[3] = 0x00;	// RESERVED
 80045d2:	2300      	movs	r3, #0
 80045d4:	74fb      	strb	r3, [r7, #19]
	frame_to_write[4] = id;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	753b      	strb	r3, [r7, #20]
	frame_to_write[5] = length&0xFF;		// length_LB
 80045dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	757b      	strb	r3, [r7, #21]
	frame_to_write[6] = (length>>8)&0xFF;		// length_HB
 80045e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	75bb      	strb	r3, [r7, #22]
	frame_to_write[7] = instruction;		// Instruction : Write
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	75fb      	strb	r3, [r7, #23]

    va_list args;
    va_start(args, parameter_data_size);
 80045f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045f4:	60fb      	str	r3, [r7, #12]
	for(int i=0 ; i < parameter_data_size ; i++ )
 80045f6:	2300      	movs	r3, #0
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fa:	e010      	b.n	800461e <dxl_sendPacket+0x6a>
	{
	arg = va_arg(args, int);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1d1a      	adds	r2, r3, #4
 8004600:	60fa      	str	r2, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	frame_to_write[8+i]= arg;
 8004608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460a:	3308      	adds	r3, #8
 800460c:	3350      	adds	r3, #80	; 0x50
 800460e:	443b      	add	r3, r7
 8004610:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004614:	f803 2c40 	strb.w	r2, [r3, #-64]
	for(int i=0 ; i < parameter_data_size ; i++ )
 8004618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800461a:	3301      	adds	r3, #1
 800461c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004622:	429a      	cmp	r2, r3
 8004624:	dbea      	blt.n	80045fc <dxl_sendPacket+0x48>
	}
	crc = dxl_updateCRC(0,frame_to_write,8+parameter_data_size);
 8004626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004628:	b29b      	uxth	r3, r3
 800462a:	3308      	adds	r3, #8
 800462c:	b29a      	uxth	r2, r3
 800462e:	f107 0310 	add.w	r3, r7, #16
 8004632:	4619      	mov	r1, r3
 8004634:	2000      	movs	r0, #0
 8004636:	f000 f837 	bl	80046a8 <dxl_updateCRC>
 800463a:	4603      	mov	r3, r0
 800463c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	frame_to_write[8+parameter_data_size]= (uint8_t) ( crc & 0xFF );
 8004640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004642:	3308      	adds	r3, #8
 8004644:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	3350      	adds	r3, #80	; 0x50
 800464c:	443b      	add	r3, r7
 800464e:	f803 2c40 	strb.w	r2, [r3, #-64]
	frame_to_write[9+parameter_data_size]= (uint8_t) ( (crc>>8) & 0xFF );
 8004652:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	b29a      	uxth	r2, r3
 800465a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800465c:	3309      	adds	r3, #9
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	3350      	adds	r3, #80	; 0x50
 8004662:	443b      	add	r3, r7
 8004664:	f803 2c40 	strb.w	r2, [r3, #-64]
	va_end(args);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8004668:	2201      	movs	r2, #1
 800466a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800466e:	480d      	ldr	r0, [pc, #52]	; (80046a4 <dxl_sendPacket+0xf0>)
 8004670:	f7fc fec6 	bl	8001400 <HAL_GPIO_WritePin>
	sendFrame(frame_to_write,parameter_data_size+2+8);
 8004674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004676:	f103 020a 	add.w	r2, r3, #10
 800467a:	f107 0310 	add.w	r3, r7, #16
 800467e:	4611      	mov	r1, r2
 8004680:	4618      	mov	r0, r3
 8004682:	f001 f8f7 	bl	8005874 <sendFrame>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800468c:	4805      	ldr	r0, [pc, #20]	; (80046a4 <dxl_sendPacket+0xf0>)
 800468e:	f7fc feb7 	bl	8001400 <HAL_GPIO_WritePin>

	return 0;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3750      	adds	r7, #80	; 0x50
 8004698:	46bd      	mov	sp, r7
 800469a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800469e:	b002      	add	sp, #8
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40020000 	.word	0x40020000

080046a8 <dxl_updateCRC>:
//==============================================================
uint16_t dxl_updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80046b4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	4611      	mov	r1, r2
 80046bc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80046c0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80046c4:	4602      	mov	r2, r0
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80046cc:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80046d0:	460a      	mov	r2, r1
 80046d2:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 80046d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80046d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046dc:	4a29      	ldr	r2, [pc, #164]	; (8004784 <dxl_updateCRC+0xdc>)
 80046de:	4618      	mov	r0, r3
 80046e0:	4611      	mov	r1, r2
 80046e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e6:	461a      	mov	r2, r3
 80046e8:	f001 fcfa 	bl	80060e0 <memcpy>
	                                0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5,
	                                0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
	                                0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
	                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for(j = 0; j < data_blk_size; j++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80046f2:	e034      	b.n	800475e <dxl_updateCRC+0xb6>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 80046f4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80046f8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	b29a      	uxth	r2, r3
 8004702:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004706:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8004710:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8004714:	1c58      	adds	r0, r3, #1
 8004716:	6008      	str	r0, [r1, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4053      	eors	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8004726:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800472a:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	b21a      	sxth	r2, r3
 8004734:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8004738:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800473c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004740:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004744:	b21b      	sxth	r3, r3
 8004746:	4053      	eors	r3, r2
 8004748:	b21a      	sxth	r2, r3
 800474a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800474e:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8004752:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8004754:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8004758:	3301      	adds	r3, #1
 800475a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 800475e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004762:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8004766:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d3c1      	bcc.n	80046f4 <dxl_updateCRC+0x4c>
	}

	return crc_accum;
 8004770:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004774:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8004778:	881b      	ldrh	r3, [r3, #0]
}
 800477a:	4618      	mov	r0, r3
 800477c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	08006114 	.word	0x08006114

08004788 <dxl_rcv_cb>:
uint8_t 	size = 0;

uint8_t 	dxl_rcvBuf[BUF_SIZE];
//==================================================================
void dxl_rcv_cb(uint8_t car)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	71fb      	strb	r3, [r7, #7]
		dxl_rcvBuf[(p_wr++)%BUF_SIZE] = car;
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <dxl_rcv_cb+0x4c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	b2d1      	uxtb	r1, r2
 800479a:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <dxl_rcv_cb+0x4c>)
 800479c:	7011      	strb	r1, [r2, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <dxl_rcv_cb+0x50>)
 80047a2:	fb83 1302 	smull	r1, r3, r3, r2
 80047a6:	1159      	asrs	r1, r3, #5
 80047a8:	17d3      	asrs	r3, r2, #31
 80047aa:	1acb      	subs	r3, r1, r3
 80047ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	4909      	ldr	r1, [pc, #36]	; (80047dc <dxl_rcv_cb+0x54>)
 80047b8:	79fa      	ldrb	r2, [r7, #7]
 80047ba:	54ca      	strb	r2, [r1, r3]
		size++;
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <dxl_rcv_cb+0x58>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <dxl_rcv_cb+0x58>)
 80047c6:	701a      	strb	r2, [r3, #0]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	2000009c 	.word	0x2000009c
 80047d8:	10624dd3 	.word	0x10624dd3
 80047dc:	200001c0 	.word	0x200001c0
 80047e0:	2000009e 	.word	0x2000009e

080047e4 <dxl_readPacket>:
#define STATE_CRC1 			10
#define STATE_CRC2 			11
#define STATE_FINAL 		12
//==================================================================
int dxl_readPacket()
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
	static uint16_t length;
	uint8_t instruction;

	static int i=0;

	state = STATE_START;
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <dxl_readPacket+0x1e0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
	i=0;
 80047f0:	4b75      	ldr	r3, [pc, #468]	; (80049c8 <dxl_readPacket+0x1e4>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

	while(p_rd != p_wr)
 80047f6:	bf00      	nop
 80047f8:	e0d0      	b.n	800499c <dxl_readPacket+0x1b8>
	{
	tmp = dxl_rcvBuf[(p_rd++)%BUF_SIZE];
 80047fa:	4b74      	ldr	r3, [pc, #464]	; (80049cc <dxl_readPacket+0x1e8>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	b2d1      	uxtb	r1, r2
 8004802:	4a72      	ldr	r2, [pc, #456]	; (80049cc <dxl_readPacket+0x1e8>)
 8004804:	7011      	strb	r1, [r2, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <dxl_readPacket+0x1ec>)
 800480a:	fb83 1302 	smull	r1, r3, r3, r2
 800480e:	1159      	asrs	r1, r3, #5
 8004810:	17d3      	asrs	r3, r2, #31
 8004812:	1acb      	subs	r3, r1, r3
 8004814:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	4a6d      	ldr	r2, [pc, #436]	; (80049d4 <dxl_readPacket+0x1f0>)
 8004820:	5cd3      	ldrb	r3, [r2, r3]
 8004822:	71fb      	strb	r3, [r7, #7]

	switch(state)
 8004824:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	f200 80b7 	bhi.w	800499c <dxl_readPacket+0x1b8>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <dxl_readPacket+0x50>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004869 	.word	0x08004869
 8004838:	08004879 	.word	0x08004879
 800483c:	08004889 	.word	0x08004889
 8004840:	08004899 	.word	0x08004899
 8004844:	0800499d 	.word	0x0800499d
 8004848:	080048a7 	.word	0x080048a7
 800484c:	080048bd 	.word	0x080048bd
 8004850:	080048cd 	.word	0x080048cd
 8004854:	08004903 	.word	0x08004903
 8004858:	08004925 	.word	0x08004925
 800485c:	0800496d 	.word	0x0800496d
 8004860:	0800497f 	.word	0x0800497f
 8004864:	08004991 	.word	0x08004991
	{
		case	STATE_START	: 		if(tmp == 0xFF) {state = STATE_HEADER_1;} 		break;
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2bff      	cmp	r3, #255	; 0xff
 800486c:	f040 8096 	bne.w	800499c <dxl_readPacket+0x1b8>
 8004870:	4b54      	ldr	r3, [pc, #336]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e091      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_HEADER_1 : 	if( tmp == 0xFF) {state = STATE_HEADER_2;} 		break;
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	2bff      	cmp	r3, #255	; 0xff
 800487c:	f040 808e 	bne.w	800499c <dxl_readPacket+0x1b8>
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004882:	2202      	movs	r2, #2
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	e089      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_HEADER_2 : 	if( tmp == 0xFD) {state = STATE_HEADER_3;}		break;
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	2bfd      	cmp	r3, #253	; 0xfd
 800488c:	f040 8086 	bne.w	800499c <dxl_readPacket+0x1b8>
 8004890:	4b4c      	ldr	r3, [pc, #304]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004892:	2203      	movs	r2, #3
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e081      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_HEADER_3 : 	if( tmp == 0x00) {state = STATE_ID;}			break;
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d17e      	bne.n	800499c <dxl_readPacket+0x1b8>
 800489e:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <dxl_readPacket+0x1e0>)
 80048a0:	2205      	movs	r2, #5
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	e07a      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_ID : 			id = tmp ; state = STATE_LENGTH_LB; term_printf("id = %d | ",id); break;
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	717b      	strb	r3, [r7, #5]
 80048aa:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <dxl_readPacket+0x1e0>)
 80048ac:	2206      	movs	r2, #6
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	797b      	ldrb	r3, [r7, #5]
 80048b2:	4619      	mov	r1, r3
 80048b4:	4848      	ldr	r0, [pc, #288]	; (80049d8 <dxl_readPacket+0x1f4>)
 80048b6:	f000 fff3 	bl	80058a0 <term_printf>
 80048ba:	e06f      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_LENGTH_LB : 	length = tmp ; state = STATE_LENGTH_HB;			break;
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	4b46      	ldr	r3, [pc, #280]	; (80049dc <dxl_readPacket+0x1f8>)
 80048c2:	801a      	strh	r2, [r3, #0]
 80048c4:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <dxl_readPacket+0x1e0>)
 80048c6:	2207      	movs	r2, #7
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e067      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_LENGTH_HB : 	length = (uint16_t)tmp << 8 | length ;
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	b21a      	sxth	r2, r3
 80048d2:	4b42      	ldr	r3, [pc, #264]	; (80049dc <dxl_readPacket+0x1f8>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	4313      	orrs	r3, r2
 80048da:	b21b      	sxth	r3, r3
 80048dc:	b29a      	uxth	r2, r3
 80048de:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <dxl_readPacket+0x1f8>)
 80048e0:	801a      	strh	r2, [r3, #0]
									state = STATE_INSTRUCTION;
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <dxl_readPacket+0x1e0>)
 80048e4:	2208      	movs	r2, #8
 80048e6:	601a      	str	r2, [r3, #0]
									term_printf("length = %d | ",length);
 80048e8:	4b3c      	ldr	r3, [pc, #240]	; (80049dc <dxl_readPacket+0x1f8>)
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
 80048ee:	483c      	ldr	r0, [pc, #240]	; (80049e0 <dxl_readPacket+0x1fc>)
 80048f0:	f000 ffd6 	bl	80058a0 <term_printf>
									length = length - 2;
 80048f4:	4b39      	ldr	r3, [pc, #228]	; (80049dc <dxl_readPacket+0x1f8>)
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	3b02      	subs	r3, #2
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <dxl_readPacket+0x1f8>)
 80048fe:	801a      	strh	r2, [r3, #0]
																					break;
 8004900:	e04c      	b.n	800499c <dxl_readPacket+0x1b8>
		case	STATE_INSTRUCTION : instruction = tmp ;
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	71bb      	strb	r3, [r7, #6]
									state = STATE_PARAM;
 8004906:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004908:	2209      	movs	r2, #9
 800490a:	601a      	str	r2, [r3, #0]
									length--;
 800490c:	4b33      	ldr	r3, [pc, #204]	; (80049dc <dxl_readPacket+0x1f8>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <dxl_readPacket+0x1f8>)
 8004916:	801a      	strh	r2, [r3, #0]
									term_printf("instruction = 0x%x | ",instruction);
 8004918:	79bb      	ldrb	r3, [r7, #6]
 800491a:	4619      	mov	r1, r3
 800491c:	4831      	ldr	r0, [pc, #196]	; (80049e4 <dxl_readPacket+0x200>)
 800491e:	f000 ffbf 	bl	80058a0 <term_printf>
																					break;
 8004922:	e03b      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_PARAM : if( length > 0 ){
 8004924:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <dxl_readPacket+0x1f8>)
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d017      	beq.n	800495c <dxl_readPacket+0x178>
									param[i++] = tmp ;
 800492c:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <dxl_readPacket+0x1e4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	4925      	ldr	r1, [pc, #148]	; (80049c8 <dxl_readPacket+0x1e4>)
 8004934:	600a      	str	r2, [r1, #0]
 8004936:	492c      	ldr	r1, [pc, #176]	; (80049e8 <dxl_readPacket+0x204>)
 8004938:	79fa      	ldrb	r2, [r7, #7]
 800493a:	54ca      	strb	r2, [r1, r3]
									length-- ;
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <dxl_readPacket+0x1f8>)
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <dxl_readPacket+0x1f8>)
 8004946:	801a      	strh	r2, [r3, #0]
									term_printf("param %d = 0x%x | ",i,tmp);
 8004948:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <dxl_readPacket+0x1e4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	79fa      	ldrb	r2, [r7, #7]
 800494e:	4619      	mov	r1, r3
 8004950:	4826      	ldr	r0, [pc, #152]	; (80049ec <dxl_readPacket+0x208>)
 8004952:	f000 ffa5 	bl	80058a0 <term_printf>
									state = STATE_PARAM;
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004958:	2209      	movs	r2, #9
 800495a:	601a      	str	r2, [r3, #0]
								}
								if (length == 0) {
 800495c:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <dxl_readPacket+0x1f8>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11b      	bne.n	800499c <dxl_readPacket+0x1b8>
									state = STATE_CRC1;
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004966:	220a      	movs	r2, #10
 8004968:	601a      	str	r2, [r3, #0]
								}
																					break;
 800496a:	e017      	b.n	800499c <dxl_readPacket+0x1b8>
		case	STATE_CRC1 : state = STATE_CRC2; term_printf("CRC1 = 0x%x | ",tmp);	break;
 800496c:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <dxl_readPacket+0x1e0>)
 800496e:	220b      	movs	r2, #11
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	4619      	mov	r1, r3
 8004976:	481e      	ldr	r0, [pc, #120]	; (80049f0 <dxl_readPacket+0x20c>)
 8004978:	f000 ff92 	bl	80058a0 <term_printf>
 800497c:	e00e      	b.n	800499c <dxl_readPacket+0x1b8>
		case 	STATE_CRC2 : state = STATE_FINAL; term_printf("CRC2 = 0x%x ",tmp);	break;
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <dxl_readPacket+0x1e0>)
 8004980:	220c      	movs	r2, #12
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	4619      	mov	r1, r3
 8004988:	481a      	ldr	r0, [pc, #104]	; (80049f4 <dxl_readPacket+0x210>)
 800498a:	f000 ff89 	bl	80058a0 <term_printf>
 800498e:	e005      	b.n	800499c <dxl_readPacket+0x1b8>
		case	STATE_FINAL : p_rd = p_wr; return 0; 								break;
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <dxl_readPacket+0x214>)
 8004992:	781a      	ldrb	r2, [r3, #0]
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <dxl_readPacket+0x1e8>)
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	2300      	movs	r3, #0
 800499a:	e00e      	b.n	80049ba <dxl_readPacket+0x1d6>
	while(p_rd != p_wr)
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <dxl_readPacket+0x1e8>)
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <dxl_readPacket+0x214>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	f47f af28 	bne.w	80047fa <dxl_readPacket+0x16>
	}
	}
	term_printf("\n\r ");
 80049aa:	4814      	ldr	r0, [pc, #80]	; (80049fc <dxl_readPacket+0x218>)
 80049ac:	f000 ff78 	bl	80058a0 <term_printf>
	p_rd = p_wr;
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <dxl_readPacket+0x214>)
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <dxl_readPacket+0x1e8>)
 80049b6:	701a      	strb	r2, [r3, #0]
	return 0;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	200000a0 	.word	0x200000a0
 80049c8:	200000a4 	.word	0x200000a4
 80049cc:	2000009d 	.word	0x2000009d
 80049d0:	10624dd3 	.word	0x10624dd3
 80049d4:	200001c0 	.word	0x200001c0
 80049d8:	08006314 	.word	0x08006314
 80049dc:	200000a8 	.word	0x200000a8
 80049e0:	08006320 	.word	0x08006320
 80049e4:	08006330 	.word	0x08006330
 80049e8:	20000088 	.word	0x20000088
 80049ec:	08006348 	.word	0x08006348
 80049f0:	0800635c 	.word	0x0800635c
 80049f4:	0800636c 	.word	0x0800636c
 80049f8:	2000009c 	.word	0x2000009c
 80049fc:	0800637c 	.word	0x0800637c

08004a00 <main>:
extern int vitess_send;
// Global variables
static int maplineDetector = 0;

int main(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
    HAL_Init();
 8004a04:	f7fc f988 	bl	8000d18 <HAL_Init>
    SystemClock_Config();
 8004a08:	f7ff fc74 	bl	80042f4 <SystemClock_Config>

    HAL_MspInit();
 8004a0c:	f000 f98a 	bl	8004d24 <HAL_MspInit>
    uart1_Init();           // ZIGBEE
 8004a10:	f000 fdac 	bl	800556c <uart1_Init>
    uart2_Init();           // CABLE
 8004a14:	f000 fdd6 	bl	80055c4 <uart2_Init>
    uart6_Init();           // DYNAMIXEL
 8004a18:	f000 fe00 	bl	800561c <uart6_Init>
    HAL_Delay(500);
 8004a1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a20:	f7fc f9ec 	bl	8000dfc <HAL_Delay>

    dxl_LED(1, LED_ON);
 8004a24:	2101      	movs	r1, #1
 8004a26:	2001      	movs	r0, #1
 8004a28:	f7ff fd58 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a30:	f7fc f9e4 	bl	8000dfc <HAL_Delay>
    dxl_LED(1, LED_OFF);
 8004a34:	2100      	movs	r1, #0
 8004a36:	2001      	movs	r0, #1
 8004a38:	f7ff fd50 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a40:	f7fc f9dc 	bl	8000dfc <HAL_Delay>
    dxl_LED(1, LED_ON );
 8004a44:	2101      	movs	r1, #1
 8004a46:	2001      	movs	r0, #1
 8004a48:	f7ff fd48 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a50:	f7fc f9d4 	bl	8000dfc <HAL_Delay>
    dxl_LED(1, LED_OFF);
 8004a54:	2100      	movs	r1, #0
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7ff fd40 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a60:	f7fc f9cc 	bl	8000dfc <HAL_Delay>

    dxl_setOperatingMode(1, VELOCITY_MODE);
 8004a64:	2101      	movs	r1, #1
 8004a66:	2001      	movs	r0, #1
 8004a68:	f7ff fd66 	bl	8004538 <dxl_setOperatingMode>
    dxl_torque(1, TORQUE_ON);
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f7ff fd4b 	bl	800450a <dxl_torque>

    dxl_LED(1, LED_ON);
 8004a74:	2101      	movs	r1, #1
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7ff fd30 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a80:	f7fc f9bc 	bl	8000dfc <HAL_Delay>
    dxl_LED(1, LED_OFF);
 8004a84:	2100      	movs	r1, #0
 8004a86:	2001      	movs	r0, #1
 8004a88:	f7ff fd28 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a90:	f7fc f9b4 	bl	8000dfc <HAL_Delay>
    dxl_LED(1, LED_ON );
 8004a94:	2101      	movs	r1, #1
 8004a96:	2001      	movs	r0, #1
 8004a98:	f7ff fd20 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004a9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aa0:	f7fc f9ac 	bl	8000dfc <HAL_Delay>
    dxl_LED(1, LED_OFF);
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f7ff fd18 	bl	80044dc <dxl_LED>
    HAL_Delay(500);
 8004aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ab0:	f7fc f9a4 	bl	8000dfc <HAL_Delay>

    dxl_setOperatingMode(2, VELOCITY_MODE);
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	2002      	movs	r0, #2
 8004ab8:	f7ff fd3e 	bl	8004538 <dxl_setOperatingMode>
    dxl_torque(2, TORQUE_ON);
 8004abc:	2101      	movs	r1, #1
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f7ff fd23 	bl	800450a <dxl_torque>


    while (1)
    {
        switch (command_send)
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <main+0x170>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	3b61      	subs	r3, #97	; 0x61
 8004aca:	2b14      	cmp	r3, #20
 8004acc:	d84b      	bhi.n	8004b66 <main+0x166>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <main+0xd4>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b61 	.word	0x08004b61
 8004ad8:	08004b67 	.word	0x08004b67
 8004adc:	08004b67 	.word	0x08004b67
 8004ae0:	08004b35 	.word	0x08004b35
 8004ae4:	08004b67 	.word	0x08004b67
 8004ae8:	08004b67 	.word	0x08004b67
 8004aec:	08004b67 	.word	0x08004b67
 8004af0:	08004b67 	.word	0x08004b67
 8004af4:	08004b67 	.word	0x08004b67
 8004af8:	08004b67 	.word	0x08004b67
 8004afc:	08004b67 	.word	0x08004b67
 8004b00:	08004b41 	.word	0x08004b41
 8004b04:	08004b67 	.word	0x08004b67
 8004b08:	08004b67 	.word	0x08004b67
 8004b0c:	08004b67 	.word	0x08004b67
 8004b10:	08004b67 	.word	0x08004b67
 8004b14:	08004b67 	.word	0x08004b67
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004b59 	.word	0x08004b59
 8004b20:	08004b67 	.word	0x08004b67
 8004b24:	08004b29 	.word	0x08004b29
        {
            case 'u':
                move_up(vitess_send);
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <main+0x174>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 f823 	bl	8004b78 <move_up>
                break;
 8004b32:	e019      	b.n	8004b68 <main+0x168>
            case 'd':
                move_down(vitess_send);
 8004b34:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <main+0x174>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 f835 	bl	8004ba8 <move_down>
                break;
 8004b3e:	e013      	b.n	8004b68 <main+0x168>
            case 'l':
                move_left(vitess_send);
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <main+0x174>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f847 	bl	8004bd8 <move_left>
                break;
 8004b4a:	e00d      	b.n	8004b68 <main+0x168>
            case 'r':
                move_right(vitess_send);
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <main+0x174>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f857 	bl	8004c04 <move_right>
                break;
 8004b56:	e007      	b.n	8004b68 <main+0x168>
            case 's':
                stop_robot(0);
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f000 f86d 	bl	8004c38 <stop_robot>
                break;
 8004b5e:	e003      	b.n	8004b68 <main+0x168>
            case 'a':
            	detect_line();
 8004b60:	f000 f880 	bl	8004c64 <detect_line>
            	break;
 8004b64:	e000      	b.n	8004b68 <main+0x168>
            default:
                // Handle cases if necessary
                break;
 8004b66:	bf00      	nop
        }
        // Wait for 100 ms
        HAL_Delay(100);
 8004b68:	2064      	movs	r0, #100	; 0x64
 8004b6a:	f7fc f947 	bl	8000dfc <HAL_Delay>
        switch (command_send)
 8004b6e:	e7a9      	b.n	8004ac4 <main+0xc4>
 8004b70:	2000044c 	.word	0x2000044c
 8004b74:	20000450 	.word	0x20000450

08004b78 <move_up>:
#include "drv_uart.h"
#include "dynamixel.h"

RobotState robot_state = STOPPED;

void move_up(int velocity) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
    dxl_setGoalVelocity(1, -velocity);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	425b      	negs	r3, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	2001      	movs	r0, #1
 8004b88:	f7ff fced 	bl	8004566 <dxl_setGoalVelocity>
    dxl_setGoalVelocity(2, velocity);
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	2002      	movs	r0, #2
 8004b90:	f7ff fce9 	bl	8004566 <dxl_setGoalVelocity>
    robot_state = MOVING_FORWARD;
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <move_up+0x2c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000005 	.word	0x20000005

08004ba8 <move_down>:

void move_down(int velocity) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    dxl_setGoalVelocity(1, velocity);
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	f7ff fcd7 	bl	8004566 <dxl_setGoalVelocity>
    dxl_setGoalVelocity(2, -velocity);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	425b      	negs	r3, r3
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	2002      	movs	r0, #2
 8004bc0:	f7ff fcd1 	bl	8004566 <dxl_setGoalVelocity>
    robot_state = MOVING_BACKWARD;
 8004bc4:	4b03      	ldr	r3, [pc, #12]	; (8004bd4 <move_down+0x2c>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000005 	.word	0x20000005

08004bd8 <move_left>:

void move_left(int velocity) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
    dxl_setGoalVelocity(1, velocity);
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	2001      	movs	r0, #1
 8004be4:	f7ff fcbf 	bl	8004566 <dxl_setGoalVelocity>
    dxl_setGoalVelocity(2, velocity);
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	2002      	movs	r0, #2
 8004bec:	f7ff fcbb 	bl	8004566 <dxl_setGoalVelocity>
    robot_state = TURNING_LEFT;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <move_left+0x28>)
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	701a      	strb	r2, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000005 	.word	0x20000005

08004c04 <move_right>:

void move_right(int velocity) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
    dxl_setGoalVelocity(1, -velocity);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	425b      	negs	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	2001      	movs	r0, #1
 8004c14:	f7ff fca7 	bl	8004566 <dxl_setGoalVelocity>
    dxl_setGoalVelocity(2, -velocity);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	425b      	negs	r3, r3
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2002      	movs	r0, #2
 8004c20:	f7ff fca1 	bl	8004566 <dxl_setGoalVelocity>
    robot_state = TURNING_RIGHT;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <move_right+0x30>)
 8004c26:	2203      	movs	r2, #3
 8004c28:	701a      	strb	r2, [r3, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000005 	.word	0x20000005

08004c38 <stop_robot>:

void stop_robot(int velocity) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
    dxl_setGoalVelocity(1, velocity);
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	2001      	movs	r0, #1
 8004c44:	f7ff fc8f 	bl	8004566 <dxl_setGoalVelocity>
    dxl_setGoalVelocity(2, velocity);
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	2002      	movs	r0, #2
 8004c4c:	f7ff fc8b 	bl	8004566 <dxl_setGoalVelocity>
    robot_state = STOPPED;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <stop_robot+0x28>)
 8004c52:	2204      	movs	r2, #4
 8004c54:	701a      	strb	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000005 	.word	0x20000005

08004c64 <detect_line>:

void detect_line() {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
    // Read line sensor
    GPIO_PinState lineStateRight = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	482a      	ldr	r0, [pc, #168]	; (8004d18 <detect_line+0xb4>)
 8004c6e:	f7fc fbaf 	bl	80013d0 <HAL_GPIO_ReadPin>
 8004c72:	4603      	mov	r3, r0
 8004c74:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState lineStateLeft = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8004c76:	2110      	movs	r1, #16
 8004c78:	4827      	ldr	r0, [pc, #156]	; (8004d18 <detect_line+0xb4>)
 8004c7a:	f7fc fba9 	bl	80013d0 <HAL_GPIO_ReadPin>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73bb      	strb	r3, [r7, #14]

    // Get the current velocities
    int speed1 = dxl_getPresentVelocity(1);
 8004c82:	2001      	movs	r0, #1
 8004c84:	f7ff fbfa 	bl	800447c <dxl_getPresentVelocity>
 8004c88:	60b8      	str	r0, [r7, #8]
    int speed2 = dxl_getPresentVelocity(2);
 8004c8a:	2002      	movs	r0, #2
 8004c8c:	f7ff fbf6 	bl	800447c <dxl_getPresentVelocity>
 8004c90:	6078      	str	r0, [r7, #4]

    // Send velocity information to the client
    term_printf_zigbee("\r\nSPEEDS:%d,%d\n", speed1, speed2);
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4821      	ldr	r0, [pc, #132]	; (8004d1c <detect_line+0xb8>)
 8004c98:	f000 fff2 	bl	8005c80 <term_printf_zigbee>

    // Check line sensor states and set robot movement accordingly
    if (lineStateLeft == GPIO_PIN_SET && lineStateRight == GPIO_PIN_SET) {
 8004c9c:	7bbb      	ldrb	r3, [r7, #14]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d106      	bne.n	8004cb0 <detect_line+0x4c>
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d103      	bne.n	8004cb0 <detect_line+0x4c>
        move_up(30);
 8004ca8:	201e      	movs	r0, #30
 8004caa:	f7ff ff65 	bl	8004b78 <move_up>
 8004cae:	e02f      	b.n	8004d10 <detect_line+0xac>
    } else if (lineStateLeft == GPIO_PIN_SET && lineStateRight == GPIO_PIN_RESET) {
 8004cb0:	7bbb      	ldrb	r3, [r7, #14]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10e      	bne.n	8004cd4 <detect_line+0x70>
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <detect_line+0x70>
    	dxl_setGoalVelocity(1, 10);
 8004cbc:	210a      	movs	r1, #10
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f7ff fc51 	bl	8004566 <dxl_setGoalVelocity>
        dxl_setGoalVelocity(2, 10);
 8004cc4:	210a      	movs	r1, #10
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7ff fc4d 	bl	8004566 <dxl_setGoalVelocity>
        robot_state = TURNING_LEFT;
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <detect_line+0xbc>)
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e01d      	b.n	8004d10 <detect_line+0xac>
    } else if (lineStateRight == GPIO_PIN_SET && lineStateLeft == GPIO_PIN_RESET) {
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d110      	bne.n	8004cfc <detect_line+0x98>
 8004cda:	7bbb      	ldrb	r3, [r7, #14]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <detect_line+0x98>
        dxl_setGoalVelocity(1, -10);
 8004ce0:	f06f 0109 	mvn.w	r1, #9
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f7ff fc3e 	bl	8004566 <dxl_setGoalVelocity>
        dxl_setGoalVelocity(2, -10);
 8004cea:	f06f 0109 	mvn.w	r1, #9
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f7ff fc39 	bl	8004566 <dxl_setGoalVelocity>
        robot_state = TURNING_LEFT;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <detect_line+0xbc>)
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	e009      	b.n	8004d10 <detect_line+0xac>
    } else if (lineStateRight == GPIO_PIN_RESET && lineStateLeft == GPIO_PIN_RESET) {
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <detect_line+0xac>
 8004d02:	7bbb      	ldrb	r3, [r7, #14]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <detect_line+0xac>
        stop_robot(0);
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f7ff ff95 	bl	8004c38 <stop_robot>
    }
}
 8004d0e:	e7ff      	b.n	8004d10 <detect_line+0xac>
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	08006380 	.word	0x08006380
 8004d20:	20000005 	.word	0x20000005

08004d24 <HAL_MspInit>:
void HAL_UARTDYN_MspInit(void);
void HAL_GPIO_LINE_MspInit(void);


void HAL_MspInit(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0

	  __GPIOA_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	4a1b      	ldr	r2, [pc, #108]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3a:	4b19      	ldr	r3, [pc, #100]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
	  __GPIOB_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	4b15      	ldr	r3, [pc, #84]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d50:	f043 0302 	orr.w	r3, r3, #2
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
	  __GPIOC_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	6313      	str	r3, [r2, #48]	; 0x30
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_MspInit+0x7c>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]

	  HAL_UARTCOM_MspInit();   // UART2
 8004d7e:	f000 f829 	bl	8004dd4 <HAL_UARTCOM_MspInit>
	  HAL_UARTDYN_MspInit();   // UART6
 8004d82:	f000 f8b9 	bl	8004ef8 <HAL_UARTDYN_MspInit>
	  HAL_UART1_MspInit();     // UART1
 8004d86:	f000 f865 	bl	8004e54 <HAL_UART1_MspInit>

	  HAL_tickTimer_MspInit();
 8004d8a:	f000 f943 	bl	8005014 <HAL_tickTimer_MspInit>

	  HAL_GPIO_LINE_MspInit();
 8004d8e:	f000 f901 	bl	8004f94 <HAL_GPIO_LINE_MspInit>
	//  HAL_GPIO_LED_MspInit();
	//  HAL_GPIO_BUTTON_MspInit();
	//  HAL_i2c_MspInit();
	//  HAL_spi_MspInit();
	//  HAL_adcir_MspInit();
	  HAL_GPIO_DYN_wrEn_MspInit();
 8004d92:	f000 f807 	bl	8004da4 <HAL_GPIO_DYN_wrEn_MspInit>
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_GPIO_DYN_wrEn_MspInit>:

/*****************************************************************/

void HAL_GPIO_DYN_wrEn_MspInit(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;


	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db0:	2301      	movs	r3, #1
 8004db2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004db4:	2301      	movs	r3, #1
 8004db6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004db8:	2302      	movs	r3, #2
 8004dba:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4803      	ldr	r0, [pc, #12]	; (8004dd0 <HAL_GPIO_DYN_wrEn_MspInit+0x2c>)
 8004dc2:	f7fc f981 	bl	80010c8 <HAL_GPIO_Init>
}
 8004dc6:	bf00      	nop
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40020000 	.word	0x40020000

08004dd4 <HAL_UARTCOM_MspInit>:
			USART2 : ST-LINK virtual Port
 TX --> PA2
 RX --> PA3
*******************************************************************/
void HAL_UARTCOM_MspInit(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <HAL_UARTCOM_MspInit+0x78>)
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	4a1a      	ldr	r2, [pc, #104]	; (8004e4c <HAL_UARTCOM_MspInit+0x78>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dea:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <HAL_UARTCOM_MspInit+0x78>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	68bb      	ldr	r3, [r7, #8]

  __USART2_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <HAL_UARTCOM_MspInit+0x78>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <HAL_UARTCOM_MspInit+0x78>)
 8004e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e04:	6413      	str	r3, [r2, #64]	; 0x40
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <HAL_UARTCOM_MspInit+0x78>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 8004e12:	230c      	movs	r3, #12
 8004e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004e16:	2302      	movs	r3, #2
 8004e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART2;
 8004e22:	2307      	movs	r3, #7
 8004e24:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4808      	ldr	r0, [pc, #32]	; (8004e50 <HAL_UARTCOM_MspInit+0x7c>)
 8004e2e:	f7fc f94b 	bl	80010c8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART2_IRQn, USART2_IRQ_PRIO, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2109      	movs	r1, #9
 8004e36:	2026      	movs	r0, #38	; 0x26
 8004e38:	f7fc f8df 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e3c:	2026      	movs	r0, #38	; 0x26
 8004e3e:	f7fc f8f8 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004e42:	bf00      	nop
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40020000 	.word	0x40020000

08004e54 <HAL_UART1_MspInit>:

  PA9     ------> USART1_TX
  PB3     ------> USART1_RX
******************************************************************/
void HAL_UART1_MspInit(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	4b23      	ldr	r3, [pc, #140]	; (8004eec <HAL_UART1_MspInit+0x98>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <HAL_UART1_MspInit+0x98>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_UART1_MspInit+0x98>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]

  __USART1_CLK_ENABLE();
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <HAL_UART1_MspInit+0x98>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_UART1_MspInit+0x98>)
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	6453      	str	r3, [r2, #68]	; 0x44
 8004e86:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_UART1_MspInit+0x98>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8004e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART1;
 8004ea4:	2307      	movs	r3, #7
 8004ea6:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	4619      	mov	r1, r3
 8004eae:	4810      	ldr	r0, [pc, #64]	; (8004ef0 <HAL_UART1_MspInit+0x9c>)
 8004eb0:	f7fc f90a 	bl	80010c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART1;
 8004ec4:	2307      	movs	r3, #7
 8004ec6:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4809      	ldr	r0, [pc, #36]	; (8004ef4 <HAL_UART1_MspInit+0xa0>)
 8004ed0:	f7fc f8fa 	bl	80010c8 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART1_IRQn, USART1_IRQ_PRIO, 0);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2108      	movs	r1, #8
 8004ed8:	2025      	movs	r0, #37	; 0x25
 8004eda:	f7fc f88e 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ede:	2025      	movs	r0, #37	; 0x25
 8004ee0:	f7fc f8a7 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004ee4:	bf00      	nop
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020000 	.word	0x40020000
 8004ef4:	40020400 	.word	0x40020400

08004ef8 <HAL_UARTDYN_MspInit>:

  PC6     ------> USART6_TX
  PC7     ------> USART6_RX
******************************************************************/
void HAL_UARTDYN_MspInit(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

    __USART6_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <HAL_UARTDYN_MspInit+0x90>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <HAL_UARTDYN_MspInit+0x90>)
 8004f08:	f043 0320 	orr.w	r3, r3, #32
 8004f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <HAL_UARTDYN_MspInit+0x90>)
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f22:	2301      	movs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004f26:	2301      	movs	r3, #1
 8004f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4816      	ldr	r0, [pc, #88]	; (8004f8c <HAL_UARTDYN_MspInit+0x94>)
 8004f34:	f7fc f8c8 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f3c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f42:	2301      	movs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004f46:	2301      	movs	r3, #1
 8004f48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	480f      	ldr	r0, [pc, #60]	; (8004f90 <HAL_UARTDYN_MspInit+0x98>)
 8004f54:	f7fc f8b8 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;		// CAVALIER SUR PA_11 et PA_6
 8004f58:	2340      	movs	r3, #64	; 0x40
 8004f5a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f64:	1d3b      	adds	r3, r7, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4809      	ldr	r0, [pc, #36]	; (8004f90 <HAL_UARTDYN_MspInit+0x98>)
 8004f6a:	f7fc f8ad 	bl	80010c8 <HAL_GPIO_Init>



    HAL_NVIC_SetPriority(USART6_IRQn, USART6_IRQ_PRIO, 0);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	210a      	movs	r1, #10
 8004f72:	2047      	movs	r0, #71	; 0x47
 8004f74:	f7fc f841 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004f78:	2047      	movs	r0, #71	; 0x47
 8004f7a:	f7fc f85a 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40020800 	.word	0x40020800
 8004f90:	40020000 	.word	0x40020000

08004f94 <HAL_GPIO_LINE_MspInit>:


}

void HAL_GPIO_LINE_MspInit(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;



    __GPIOA_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_GPIO_LINE_MspInit+0x78>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_GPIO_LINE_MspInit+0x78>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_GPIO_LINE_MspInit+0x78>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
    __GPIOB_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	4b14      	ldr	r3, [pc, #80]	; (800500c <HAL_GPIO_LINE_MspInit+0x78>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	4a13      	ldr	r2, [pc, #76]	; (800500c <HAL_GPIO_LINE_MspInit+0x78>)
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_GPIO_LINE_MspInit+0x78>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	480a      	ldr	r0, [pc, #40]	; (8005010 <HAL_GPIO_LINE_MspInit+0x7c>)
 8004fe6:	f7fc f86f 	bl	80010c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004fea:	2310      	movs	r3, #16
 8004fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff6:	f107 030c 	add.w	r3, r7, #12
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4804      	ldr	r0, [pc, #16]	; (8005010 <HAL_GPIO_LINE_MspInit+0x7c>)
 8004ffe:	f7fc f863 	bl	80010c8 <HAL_GPIO_Init>


}
 8005002:	bf00      	nop
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40020000 	.word	0x40020000

08005014 <HAL_tickTimer_MspInit>:

/******************************************************************
			TIMER 5 TickTimer
******************************************************************/
void HAL_tickTimer_MspInit(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0

	__TIM5_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_tickTimer_MspInit+0x3c>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <HAL_tickTimer_MspInit+0x3c>)
 8005024:	f043 0308 	orr.w	r3, r3, #8
 8005028:	6413      	str	r3, [r2, #64]	; 0x40
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_tickTimer_MspInit+0x3c>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	607b      	str	r3, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]

 	 HAL_NVIC_SetPriority(TIM5_IRQn, TIM5_IRQ_PRIO, 0);
 8005036:	2200      	movs	r2, #0
 8005038:	210c      	movs	r1, #12
 800503a:	2032      	movs	r0, #50	; 0x32
 800503c:	f7fb ffdd 	bl	8000ffa <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005040:	2032      	movs	r0, #50	; 0x32
 8005042:	f7fb fff6 	bl	8001032 <HAL_NVIC_EnableIRQ>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40023800 	.word	0x40023800

08005054 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8005062:	b480      	push	{r7}
 8005064:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005066:	e7fe      	b.n	8005066 <HardFault_Handler+0x4>

08005068 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800506c:	e7fe      	b.n	800506c <MemManage_Handler+0x4>

0800506e <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 800506e:	b480      	push	{r7}
 8005070:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005072:	e7fe      	b.n	8005072 <BusFault_Handler+0x4>

08005074 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005078:	e7fe      	b.n	8005078 <UsageFault_Handler+0x4>

0800507a <DebugMon_Handler>:
void SVC_Handler(void)
{}
*/

void DebugMon_Handler(void)
{
 800507a:	b480      	push	{r7}
 800507c:	af00      	add	r7, sp, #0
}
 800507e:	bf00      	nop
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <SysTick_Handler>:
void PendSV_Handler(void)
{}
*/

void SysTick_Handler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	/*if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
	    {
	      xPortSysTickHandler();
	    }*/
  HAL_IncTick();
 800508c:	f7fb fe96 	bl	8000dbc <HAL_IncTick>
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}

08005094 <OTG_FS_IRQHandler>:


void OTG_FS_IRQHandler(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
   //HAL_PCD_IRQHandler(&hpcd); // USB
}
 8005098:	bf00      	nop
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <TIM5_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f4xx.s).                                               */
/******************************************************************************/

void TIM5_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle_period);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <TIM5_IRQHandler+0x10>)
 80050aa:	f7fe fa0b 	bl	80034c4 <HAL_TIM_IRQHandler>
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200003b8 	.word	0x200003b8

080050b8 <EXTI0_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI0_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80050bc:	2001      	movs	r0, #1
 80050be:	f7fc f9b9 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <EXTI1_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI1_IRQHandler(void)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80050ca:	2002      	movs	r0, #2
 80050cc:	f7fc f9b2 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80050d8:	4802      	ldr	r0, [pc, #8]	; (80050e4 <I2C1_EV_IRQHandler+0x10>)
 80050da:	f7fc f9ce 	bl	800147a <HAL_I2C_EV_IRQHandler>
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	200003f8 	.word	0x200003f8

080050e8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80050ec:	4802      	ldr	r0, [pc, #8]	; (80050f8 <I2C1_ER_IRQHandler+0x10>)
 80050ee:	f7fc fb2a 	bl	8001746 <HAL_I2C_ER_IRQHandler>
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200003f8 	.word	0x200003f8

080050fc <EXTI15_10_IRQHandler>:

//=======================================================
// USER BUTTON INTERRUPT (PC13)
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005100:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005104:	f7fc f996 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
}
 8005108:	bf00      	nop
 800510a:	bd80      	pop	{r7, pc}

0800510c <USART2_IRQHandler>:
//=======================================================
// STLINK USART RECEIVE HANDLER
//=======================================================
void USART2_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 8005110:	4802      	ldr	r0, [pc, #8]	; (800511c <USART2_IRQHandler+0x10>)
 8005112:	f7fe fc6b 	bl	80039ec <HAL_UART_IRQHandler>
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000140 	.word	0x20000140

08005120 <USART6_IRQHandler>:
//=======================================================
// ZIGBEE USART RECEIVE HANDLER
//=======================================================
void USART6_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart6Handle);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <USART6_IRQHandler+0x10>)
 8005126:	f7fe fc61 	bl	80039ec <HAL_UART_IRQHandler>
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000100 	.word	0x20000100

08005134 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart1Handle);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <USART1_IRQHandler+0x10>)
 800513a:	f7fe fc57 	bl	80039ec <HAL_UART_IRQHandler>
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000180 	.word	0x20000180

08005148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800514c:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <SystemInit+0x60>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <SystemInit+0x60>)
 8005154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800515c:	4b13      	ldr	r3, [pc, #76]	; (80051ac <SystemInit+0x64>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a12      	ldr	r2, [pc, #72]	; (80051ac <SystemInit+0x64>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005168:	4b10      	ldr	r3, [pc, #64]	; (80051ac <SystemInit+0x64>)
 800516a:	2200      	movs	r2, #0
 800516c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <SystemInit+0x64>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <SystemInit+0x64>)
 8005174:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <SystemInit+0x64>)
 8005180:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <SystemInit+0x68>)
 8005182:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <SystemInit+0x64>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a08      	ldr	r2, [pc, #32]	; (80051ac <SystemInit+0x64>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005190:	4b06      	ldr	r3, [pc, #24]	; (80051ac <SystemInit+0x64>)
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005196:	4b04      	ldr	r3, [pc, #16]	; (80051a8 <SystemInit+0x60>)
 8005198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800519c:	609a      	str	r2, [r3, #8]
#endif
}
 800519e:	bf00      	nop
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	e000ed00 	.word	0xe000ed00
 80051ac:	40023800 	.word	0x40023800
 80051b0:	24003010 	.word	0x24003010

080051b4 <num2str>:
 */
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	fb01 f202 	mul.w	r2, r1, r2
 80051d4:	1a9a      	subs	r2, r3, r2
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1c59      	adds	r1, r3, #1
 80051da:	60f9      	str	r1, [r7, #12]
 80051dc:	4936      	ldr	r1, [pc, #216]	; (80052b8 <num2str+0x104>)
 80051de:	5c8a      	ldrb	r2, [r1, r2]
 80051e0:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e9      	bne.n	80051c6 <num2str+0x12>
        *s='\0';
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e01a      	b.n	800523c <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	76fb      	strb	r3, [r7, #27]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	441a      	add	r2, r3
 800521c:	6979      	ldr	r1, [r7, #20]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	440b      	add	r3, r1
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4413      	add	r3, r2
 8005232:	7efa      	ldrb	r2, [r7, #27]
 8005234:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3301      	adds	r3, #1
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3df      	bcc.n	8005206 <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d22d      	bcs.n	80052aa <num2str+0xf6>
                for (i=cnt;i==0;i--)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	e00e      	b.n	8005272 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	441a      	add	r2, r3
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4419      	add	r1, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1acb      	subs	r3, r1, r3
 8005264:	6979      	ldr	r1, [r7, #20]
 8005266:	440b      	add	r3, r1
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3b01      	subs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0ed      	beq.n	8005254 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <num2str+0xd0>
 800527e:	2320      	movs	r3, #32
 8005280:	76fb      	strb	r3, [r7, #27]
 8005282:	e001      	b.n	8005288 <num2str+0xd4>
 8005284:	2330      	movs	r3, #48	; 0x30
 8005286:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	e007      	b.n	800529e <num2str+0xea>
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4413      	add	r3, r2
 8005294:	7efa      	ldrb	r2, [r7, #27]
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3f1      	bcc.n	800528e <num2str+0xda>
        }
}
 80052aa:	bf00      	nop
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	2000000c 	.word	0x2000000c

080052bc <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80052d4:	e02e      	b.n	8005334 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	2b2f      	cmp	r3, #47	; 0x2f
 80052da:	d906      	bls.n	80052ea <str2num+0x2e>
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b39      	cmp	r3, #57	; 0x39
 80052e0:	d803      	bhi.n	80052ea <str2num+0x2e>
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	3b30      	subs	r3, #48	; 0x30
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	e018      	b.n	800531c <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d109      	bne.n	8005304 <str2num+0x48>
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d906      	bls.n	8005304 <str2num+0x48>
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b46      	cmp	r3, #70	; 0x46
 80052fa:	d803      	bhi.n	8005304 <str2num+0x48>
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	3b37      	subs	r3, #55	; 0x37
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	e00b      	b.n	800531c <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b10      	cmp	r3, #16
 8005308:	d117      	bne.n	800533a <str2num+0x7e>
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b60      	cmp	r3, #96	; 0x60
 800530e:	d914      	bls.n	800533a <str2num+0x7e>
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b66      	cmp	r3, #102	; 0x66
 8005314:	d811      	bhi.n	800533a <str2num+0x7e>
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	3b57      	subs	r3, #87	; 0x57
 800531a:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
		ch=*s++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1cd      	bne.n	80052d6 <str2num+0x1a>
	}
	return u;
 800533a:	697b      	ldr	r3, [r7, #20]
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3b01      	subs	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800535c:	e018      	b.n	8005390 <reverse+0x48>
    {
        temp = str[i];
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	440b      	add	r3, r1
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3301      	adds	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	3b01      	subs	r3, #1
 800538e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	dbe2      	blt.n	800535e <reverse+0x16>
    }
}
 8005398:	bf00      	nop
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
    while (x)
 80053b8:	e01d      	b.n	80053f6 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <intToStr+0x8c>)
 80053be:	fb83 1302 	smull	r1, r3, r3, r2
 80053c2:	1099      	asrs	r1, r3, #2
 80053c4:	17d3      	asrs	r3, r2, #31
 80053c6:	1ac9      	subs	r1, r1, r3
 80053c8:	460b      	mov	r3, r1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	1ad1      	subs	r1, r2, r3
 80053d2:	b2ca      	uxtb	r2, r1
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	6179      	str	r1, [r7, #20]
 80053da:	4619      	mov	r1, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	440b      	add	r3, r1
 80053e0:	3230      	adds	r2, #48	; 0x30
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
        x = x/10;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <intToStr+0x8c>)
 80053ea:	fb82 1203 	smull	r1, r2, r2, r3
 80053ee:	1092      	asrs	r2, r2, #2
 80053f0:	17db      	asrs	r3, r3, #31
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	60fb      	str	r3, [r7, #12]
    while (x)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1de      	bne.n	80053ba <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80053fc:	e007      	b.n	800540e <intToStr+0x66>
        str[i++] = '0';
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	617a      	str	r2, [r7, #20]
 8005404:	461a      	mov	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4413      	add	r3, r2
 800540a:	2230      	movs	r2, #48	; 0x30
 800540c:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	dbf3      	blt.n	80053fe <intToStr+0x56>

    reverse(str, i);
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	68b8      	ldr	r0, [r7, #8]
 800541a:	f7ff ff95 	bl	8005348 <reverse>
    str[i] = '\0';
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	4413      	add	r3, r2
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
    return i;
 8005428:	697b      	ldr	r3, [r7, #20]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	66666667 	.word	0x66666667

08005438 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	ed87 0a02 	vstr	s0, [r7, #8]
 8005444:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8005446:	edd7 7a02 	vldr	s15, [r7, #8]
 800544a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544e:	ee17 3a90 	vmov	r3, s15
 8005452:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005466:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800546a:	2200      	movs	r2, #0
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	69f8      	ldr	r0, [r7, #28]
 8005470:	f7ff ff9a 	bl	80053a8 <intToStr>
 8005474:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d025      	beq.n	80054c8 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	222e      	movs	r2, #46	; 0x2e
 8005484:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80054d0 <float2str+0x98>
 800548c:	f000 f824 	bl	80054d8 <myPow>
 8005490:	ec53 2b10 	vmov	r2, r3, d0
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	f7fb fa6c 	bl	8000974 <__aeabi_d2f>
 800549c:	ee07 0a10 	vmov	s14, r0
 80054a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80054a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a8:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80054ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80054b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4619      	mov	r1, r3
 80054c0:	ee17 0a90 	vmov	r0, s15
 80054c4:	f7ff ff70 	bl	80053a8 <intToStr>
    }
}
 80054c8:	bf00      	nop
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	00000000 	.word	0x00000000
 80054d4:	40240000 	.word	0x40240000

080054d8 <myPow>:
//=================================================================
double myPow(double x, int n) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	ed87 0b02 	vstr	d0, [r7, #8]
 80054e2:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfb8      	it	lt
 80054ea:	425b      	neglt	r3, r3
 80054ec:	61fb      	str	r3, [r7, #28]
    double result = 1;
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <myPow+0x90>)
 80054f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 80054f8:	e01b      	b.n	8005532 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <myPow+0x40>
        {
            result = result * x;
 8005504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800550c:	f7fb f820 	bl	8000550 <__aeabi_dmul>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	61fb      	str	r3, [r7, #28]
        x = x * x;
 800551e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005526:	f7fb f813 	bl	8000550 <__aeabi_dmul>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e0      	bne.n	80054fa <myPow+0x22>
    }

    if(n < 0)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	da09      	bge.n	8005552 <myPow+0x7a>
    {
        return 1/result;
 800553e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	4908      	ldr	r1, [pc, #32]	; (8005568 <myPow+0x90>)
 8005548:	f7fb f92c 	bl	80007a4 <__aeabi_ddiv>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	e001      	b.n	8005556 <myPow+0x7e>
    }
    return result;
 8005552:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005556:	ec43 2b17 	vmov	d7, r2, r3
 800555a:	eeb0 0a47 	vmov.f32	s0, s14
 800555e:	eef0 0a67 	vmov.f32	s1, s15
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	3ff00000 	.word	0x3ff00000

0800556c <uart1_Init>:
//=================================================================
//	UART 1 INIT (ZIGBEE)
//=================================================================

void uart1_Init()
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
	  Uart1Handle.Instance          = USART1;
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <uart1_Init+0x4c>)
 8005572:	4a12      	ldr	r2, [pc, #72]	; (80055bc <uart1_Init+0x50>)
 8005574:	601a      	str	r2, [r3, #0]

	  Uart1Handle.Init.BaudRate     = 115200;
 8005576:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <uart1_Init+0x4c>)
 8005578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800557c:	605a      	str	r2, [r3, #4]
	  Uart1Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 800557e:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <uart1_Init+0x4c>)
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
	  Uart1Handle.Init.StopBits     = UART_STOPBITS_1;
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <uart1_Init+0x4c>)
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]
	  Uart1Handle.Init.Parity       = UART_PARITY_NONE;
 800558a:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <uart1_Init+0x4c>)
 800558c:	2200      	movs	r2, #0
 800558e:	611a      	str	r2, [r3, #16]
	  Uart1Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <uart1_Init+0x4c>)
 8005592:	2200      	movs	r2, #0
 8005594:	619a      	str	r2, [r3, #24]
	  Uart1Handle.Init.Mode         = UART_MODE_TX_RX;
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <uart1_Init+0x4c>)
 8005598:	220c      	movs	r2, #12
 800559a:	615a      	str	r2, [r3, #20]
	  Uart1Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800559c:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <uart1_Init+0x4c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart1Handle);
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <uart1_Init+0x4c>)
 80055a4:	f7fe f8dc 	bl	8003760 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, 1);
 80055a8:	2201      	movs	r2, #1
 80055aa:	4905      	ldr	r1, [pc, #20]	; (80055c0 <uart1_Init+0x54>)
 80055ac:	4802      	ldr	r0, [pc, #8]	; (80055b8 <uart1_Init+0x4c>)
 80055ae:	f7fe f9c7 	bl	8003940 <HAL_UART_Receive_IT>
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000180 	.word	0x20000180
 80055bc:	40011000 	.word	0x40011000
 80055c0:	200000f0 	.word	0x200000f0

080055c4 <uart2_Init>:
//=================================================================
//	UART 2 INIT (STLINK UART)
//=================================================================
void uart2_Init()
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance          = USART2;
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <uart2_Init+0x4c>)
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <uart2_Init+0x50>)
 80055cc:	601a      	str	r2, [r3, #0]

	  Uart2Handle.Init.BaudRate     = USART2_BAUDRATE;
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <uart2_Init+0x4c>)
 80055d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055d4:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <uart2_Init+0x4c>)
 80055d8:	2200      	movs	r2, #0
 80055da:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits     = UART_STOPBITS_1;
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <uart2_Init+0x4c>)
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity       = UART_PARITY_NONE;
 80055e2:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <uart2_Init+0x4c>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <uart2_Init+0x4c>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode         = UART_MODE_TX_RX;
 80055ee:	4b08      	ldr	r3, [pc, #32]	; (8005610 <uart2_Init+0x4c>)
 80055f0:	220c      	movs	r2, #12
 80055f2:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <uart2_Init+0x4c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 80055fa:	4805      	ldr	r0, [pc, #20]	; (8005610 <uart2_Init+0x4c>)
 80055fc:	f7fe f8b0 	bl	8003760 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf2, 1);
 8005600:	2201      	movs	r2, #1
 8005602:	4905      	ldr	r1, [pc, #20]	; (8005618 <uart2_Init+0x54>)
 8005604:	4802      	ldr	r0, [pc, #8]	; (8005610 <uart2_Init+0x4c>)
 8005606:	f7fe f99b 	bl	8003940 <HAL_UART_Receive_IT>
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000140 	.word	0x20000140
 8005614:	40004400 	.word	0x40004400
 8005618:	200000f4 	.word	0x200000f4

0800561c <uart6_Init>:
//=================================================================
//	UART 6 INIT ( DXL )
//=================================================================

void uart6_Init()
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
	  Uart6Handle.Instance          = USART6;
 8005620:	4b11      	ldr	r3, [pc, #68]	; (8005668 <uart6_Init+0x4c>)
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <uart6_Init+0x50>)
 8005624:	601a      	str	r2, [r3, #0]

	  Uart6Handle.Init.BaudRate     =57600;//1000000;//57600;
 8005626:	4b10      	ldr	r3, [pc, #64]	; (8005668 <uart6_Init+0x4c>)
 8005628:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800562c:	605a      	str	r2, [r3, #4]
	  Uart6Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 800562e:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <uart6_Init+0x4c>)
 8005630:	2200      	movs	r2, #0
 8005632:	609a      	str	r2, [r3, #8]
	  Uart6Handle.Init.StopBits     = UART_STOPBITS_1;
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <uart6_Init+0x4c>)
 8005636:	2200      	movs	r2, #0
 8005638:	60da      	str	r2, [r3, #12]
	  Uart6Handle.Init.Parity       = UART_PARITY_NONE;
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <uart6_Init+0x4c>)
 800563c:	2200      	movs	r2, #0
 800563e:	611a      	str	r2, [r3, #16]
	  Uart6Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <uart6_Init+0x4c>)
 8005642:	2200      	movs	r2, #0
 8005644:	619a      	str	r2, [r3, #24]
	  Uart6Handle.Init.Mode         = UART_MODE_TX_RX;
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <uart6_Init+0x4c>)
 8005648:	220c      	movs	r2, #12
 800564a:	615a      	str	r2, [r3, #20]
	  Uart6Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <uart6_Init+0x4c>)
 800564e:	2200      	movs	r2, #0
 8005650:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart6Handle);
 8005652:	4805      	ldr	r0, [pc, #20]	; (8005668 <uart6_Init+0x4c>)
 8005654:	f7fe f884 	bl	8003760 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf6, 1);
 8005658:	2201      	movs	r2, #1
 800565a:	4905      	ldr	r1, [pc, #20]	; (8005670 <uart6_Init+0x54>)
 800565c:	4802      	ldr	r0, [pc, #8]	; (8005668 <uart6_Init+0x4c>)
 800565e:	f7fe f96f 	bl	8003940 <HAL_UART_Receive_IT>
}
 8005662:	bf00      	nop
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000100 	.word	0x20000100
 800566c:	40011400 	.word	0x40011400
 8005670:	200000f8 	.word	0x200000f8

08005674 <put_char>:

//=================================================================
//	PUCHAR PROTOTYPE (USED BY PRINTF FUNCTIONS)
//=================================================================
int put_char(char ch)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
#if USE_USART_STLINK
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
 800567e:	1df9      	adds	r1, r7, #7
 8005680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005684:	2201      	movs	r2, #1
 8005686:	4804      	ldr	r0, [pc, #16]	; (8005698 <put_char+0x24>)
 8005688:	f7fe f8c1 	bl	800380e <HAL_UART_Transmit>
#else
	HAL_UART_Transmit(&Uart1Handle, (uint8_t *)&ch, 1, 0xFFFF);
#endif
  return 0;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000140 	.word	0x20000140

0800569c <putchar_zigbee>:
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
	return 0;
}

int putchar_zigbee(char ch)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Uart1Handle, (uint8_t *)&ch, 1, 0xFFFF);
 80056a6:	1df9      	adds	r1, r7, #7
 80056a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056ac:	2201      	movs	r2, #1
 80056ae:	4804      	ldr	r0, [pc, #16]	; (80056c0 <putchar_zigbee+0x24>)
 80056b0:	f7fe f8ad 	bl	800380e <HAL_UART_Transmit>
	return 0;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000180 	.word	0x20000180

080056c4 <add_to_buffer>:
//=================================================================
//	Helper Functions and Buffer Management
//=================================================================

// Add data to the buffer
static void add_to_buffer(char data) {
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
    // Check if buffer is not full
    if ((rx_buf.i_push + 1) % RING_BUF_SIZE != rx_buf.i_pop) {
 80056ce:	4b17      	ldr	r3, [pc, #92]	; (800572c <add_to_buffer+0x68>)
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	4b16      	ldr	r3, [pc, #88]	; (8005730 <add_to_buffer+0x6c>)
 80056d6:	fb83 1302 	smull	r1, r3, r3, r2
 80056da:	4413      	add	r3, r2
 80056dc:	1159      	asrs	r1, r3, #5
 80056de:	17d3      	asrs	r3, r2, #31
 80056e0:	1ac9      	subs	r1, r1, r3
 80056e2:	460b      	mov	r3, r1
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	1a5b      	subs	r3, r3, r1
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	1ad1      	subs	r1, r2, r3
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <add_to_buffer+0x68>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	4299      	cmp	r1, r3
 80056f2:	d015      	beq.n	8005720 <add_to_buffer+0x5c>
        // Add character to the buffer
        rx_buf.buf[rx_buf.i_push] = data;
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <add_to_buffer+0x68>)
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	490c      	ldr	r1, [pc, #48]	; (800572c <add_to_buffer+0x68>)
 80056fa:	79fa      	ldrb	r2, [r7, #7]
 80056fc:	54ca      	strb	r2, [r1, r3]
        // Increment write index
        rx_buf.i_push = (rx_buf.i_push + 1) % RING_BUF_SIZE;
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <add_to_buffer+0x68>)
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <add_to_buffer+0x6c>)
 8005706:	fb83 1302 	smull	r1, r3, r3, r2
 800570a:	4413      	add	r3, r2
 800570c:	1159      	asrs	r1, r3, #5
 800570e:	17d3      	asrs	r3, r2, #31
 8005710:	1ac9      	subs	r1, r1, r3
 8005712:	460b      	mov	r3, r1
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	1a5b      	subs	r3, r3, r1
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	1ad1      	subs	r1, r2, r3
 800571c:	4b03      	ldr	r3, [pc, #12]	; (800572c <add_to_buffer+0x68>)
 800571e:	63d9      	str	r1, [r3, #60]	; 0x3c
    }
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	200000ac 	.word	0x200000ac
 8005730:	88888889 	.word	0x88888889

08005734 <clear_buffer>:

// Clear the buffer
static void clear_buffer() {
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
    // Reset both read and write indices
    rx_buf.i_push = 0;
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <clear_buffer+0x1c>)
 800573a:	2200      	movs	r2, #0
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c
    rx_buf.i_pop = 0;
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <clear_buffer+0x1c>)
 8005740:	2200      	movs	r2, #0
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	200000ac 	.word	0x200000ac

08005754 <HAL_UART_RxCpltCallback>:
//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	if (UartHandle -> Instance == USART6)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a22      	ldr	r2, [pc, #136]	; (80057ec <HAL_UART_RxCpltCallback+0x98>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10a      	bne.n	800577c <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf6, 1);
 8005766:	2201      	movs	r2, #1
 8005768:	4921      	ldr	r1, [pc, #132]	; (80057f0 <HAL_UART_RxCpltCallback+0x9c>)
 800576a:	4822      	ldr	r0, [pc, #136]	; (80057f4 <HAL_UART_RxCpltCallback+0xa0>)
 800576c:	f7fe f8e8 	bl	8003940 <HAL_UART_Receive_IT>
		dxl_rcv_cb(rec_buf6[0]);
 8005770:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <HAL_UART_RxCpltCallback+0x9c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff f807 	bl	8004788 <dxl_rcv_cb>
		    	}else{
		    		add_to_buffer(car_received);
		    	}

		}
}
 800577a:	e033      	b.n	80057e4 <HAL_UART_RxCpltCallback+0x90>
		if (UartHandle -> Instance == USART2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_UART_RxCpltCallback+0xa4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d105      	bne.n	8005792 <HAL_UART_RxCpltCallback+0x3e>
			HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf2, 1);
 8005786:	2201      	movs	r2, #1
 8005788:	491c      	ldr	r1, [pc, #112]	; (80057fc <HAL_UART_RxCpltCallback+0xa8>)
 800578a:	481d      	ldr	r0, [pc, #116]	; (8005800 <HAL_UART_RxCpltCallback+0xac>)
 800578c:	f7fe f8d8 	bl	8003940 <HAL_UART_Receive_IT>
}
 8005790:	e028      	b.n	80057e4 <HAL_UART_RxCpltCallback+0x90>
			if (UartHandle -> Instance == USART1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1b      	ldr	r2, [pc, #108]	; (8005804 <HAL_UART_RxCpltCallback+0xb0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d123      	bne.n	80057e4 <HAL_UART_RxCpltCallback+0x90>
		    	HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, 1);
 800579c:	2201      	movs	r2, #1
 800579e:	491a      	ldr	r1, [pc, #104]	; (8005808 <HAL_UART_RxCpltCallback+0xb4>)
 80057a0:	481a      	ldr	r0, [pc, #104]	; (800580c <HAL_UART_RxCpltCallback+0xb8>)
 80057a2:	f7fe f8cd 	bl	8003940 <HAL_UART_Receive_IT>
		    	char car_received= (char)rec_buf1[0];
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <HAL_UART_RxCpltCallback+0xb4>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	73fb      	strb	r3, [r7, #15]
		    	if(car_received == 'e'){
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b65      	cmp	r3, #101	; 0x65
 80057b0:	d114      	bne.n	80057dc <HAL_UART_RxCpltCallback+0x88>
					rx_buf.buf[rx_buf.i_push] = '\0';
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <HAL_UART_RxCpltCallback+0xbc>)
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_UART_RxCpltCallback+0xbc>)
 80057b8:	2100      	movs	r1, #0
 80057ba:	54d1      	strb	r1, [r2, r3]
					command_send = process_command_data(rx_buf.buf);
 80057bc:	4814      	ldr	r0, [pc, #80]	; (8005810 <HAL_UART_RxCpltCallback+0xbc>)
 80057be:	f7fe fdf1 	bl	80043a4 <process_command_data>
 80057c2:	4603      	mov	r3, r0
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <HAL_UART_RxCpltCallback+0xc0>)
 80057c8:	701a      	strb	r2, [r3, #0]
		           	vitess_send = process_vitess_data(rx_buf.buf);
 80057ca:	4811      	ldr	r0, [pc, #68]	; (8005810 <HAL_UART_RxCpltCallback+0xbc>)
 80057cc:	f7fe fe10 	bl	80043f0 <process_vitess_data>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4a11      	ldr	r2, [pc, #68]	; (8005818 <HAL_UART_RxCpltCallback+0xc4>)
 80057d4:	6013      	str	r3, [r2, #0]
					clear_buffer();
 80057d6:	f7ff ffad 	bl	8005734 <clear_buffer>
}
 80057da:	e003      	b.n	80057e4 <HAL_UART_RxCpltCallback+0x90>
		    		add_to_buffer(car_received);
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff ff70 	bl	80056c4 <add_to_buffer>
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40011400 	.word	0x40011400
 80057f0:	200000f8 	.word	0x200000f8
 80057f4:	20000100 	.word	0x20000100
 80057f8:	40004400 	.word	0x40004400
 80057fc:	200000f4 	.word	0x200000f4
 8005800:	20000140 	.word	0x20000140
 8005804:	40011000 	.word	0x40011000
 8005808:	200000f0 	.word	0x200000f0
 800580c:	20000180 	.word	0x20000180
 8005810:	200000ac 	.word	0x200000ac
 8005814:	2000044c 	.word	0x2000044c
 8005818:	20000450 	.word	0x20000450

0800581c <put_string>:

//================================================================
//				PUT STRING
//================================================================
void put_string(char* s)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8005824:	e007      	b.n	8005836 <put_string+0x1a>
	{
		put_char(*s);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ff22 	bl	8005674 <put_char>
		s++;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3301      	adds	r3, #1
 8005834:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f3      	bne.n	8005826 <put_string+0xa>
	}
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <put_string_zigbee>:
		s++;
	}
}

void put_string_zigbee(char* s)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8005850:	e007      	b.n	8005862 <put_string_zigbee+0x1a>
	{
		putchar_zigbee(*s);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff20 	bl	800569c <putchar_zigbee>
		s++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3301      	adds	r3, #1
 8005860:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f3      	bne.n	8005852 <put_string_zigbee+0xa>
	}
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <sendFrame>:

void sendFrame(unsigned char* s, int size)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&Uart6Handle, s, size, 0xFFFF);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b29a      	uxth	r2, r3
 8005882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4803      	ldr	r0, [pc, #12]	; (8005898 <sendFrame+0x24>)
 800588a:	f7fd ffc0 	bl	800380e <HAL_UART_Transmit>
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	20000100 	.word	0x20000100
 800589c:	00000000 	.word	0x00000000

080058a0 <term_printf>:
//================================================================
//				TERM_PRINTF
//================================================================

void term_printf(const char* fmt, ...)
{
 80058a0:	b40f      	push	{r0, r1, r2, r3}
 80058a2:	b5b0      	push	{r4, r5, r7, lr}
 80058a4:	b0a4      	sub	sp, #144	; 0x90
 80058a6:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 80058ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80058b0:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 80058b2:	e1cd      	b.n	8005c50 <term_printf+0x3b0>
		if (*fmt =='%') {
 80058b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b25      	cmp	r3, #37	; 0x25
 80058bc:	f040 81bd 	bne.w	8005c3a <term_printf+0x39a>
			size=0; sp=1;
 80058c0:	2300      	movs	r3, #0
 80058c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058c4:	2301      	movs	r3, #1
 80058c6:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80058c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058cc:	3301      	adds	r3, #1
 80058ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d106      	bne.n	80058ea <term_printf+0x4a>
 80058dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e0:	3301      	adds	r3, #1
 80058e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e6:	2300      	movs	r3, #0
 80058e8:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80058ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80058f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80058f8:	2b30      	cmp	r3, #48	; 0x30
 80058fa:	d92c      	bls.n	8005956 <term_printf+0xb6>
 80058fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005900:	2b39      	cmp	r3, #57	; 0x39
 8005902:	d828      	bhi.n	8005956 <term_printf+0xb6>
				char tmp[10];
				int i=0;
 8005904:	2300      	movs	r3, #0
 8005906:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 8005908:	e012      	b.n	8005930 <term_printf+0x90>
					tmp[i++]=ch;
 800590a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	673a      	str	r2, [r7, #112]	; 0x70
 8005910:	3388      	adds	r3, #136	; 0x88
 8005912:	443b      	add	r3, r7
 8005914:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8005918:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 800591c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005920:	3301      	adds	r3, #1
 8005922:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005926:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8005930:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005934:	2b2f      	cmp	r3, #47	; 0x2f
 8005936:	d903      	bls.n	8005940 <term_printf+0xa0>
 8005938:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800593c:	2b39      	cmp	r3, #57	; 0x39
 800593e:	d9e4      	bls.n	800590a <term_printf+0x6a>
				}
				tmp[i]='\0';
 8005940:	463a      	mov	r2, r7
 8005942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005944:	4413      	add	r3, r2
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 800594a:	463b      	mov	r3, r7
 800594c:	210a      	movs	r1, #10
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fcb4 	bl	80052bc <str2num>
 8005954:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 8005956:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800595a:	2b25      	cmp	r3, #37	; 0x25
 800595c:	d03c      	beq.n	80059d8 <term_printf+0x138>
 800595e:	2b25      	cmp	r3, #37	; 0x25
 8005960:	f2c0 8164 	blt.w	8005c2c <term_printf+0x38c>
 8005964:	2b78      	cmp	r3, #120	; 0x78
 8005966:	f300 8161 	bgt.w	8005c2c <term_printf+0x38c>
 800596a:	2b63      	cmp	r3, #99	; 0x63
 800596c:	f2c0 815e 	blt.w	8005c2c <term_printf+0x38c>
 8005970:	3b63      	subs	r3, #99	; 0x63
 8005972:	2b15      	cmp	r3, #21
 8005974:	f200 815a 	bhi.w	8005c2c <term_printf+0x38c>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <term_printf+0xe0>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059e1 	.word	0x080059e1
 8005984:	08005a0b 	.word	0x08005a0b
 8005988:	08005c2d 	.word	0x08005c2d
 800598c:	08005b0b 	.word	0x08005b0b
 8005990:	08005c2d 	.word	0x08005c2d
 8005994:	08005c2d 	.word	0x08005c2d
 8005998:	08005c2d 	.word	0x08005c2d
 800599c:	08005c2d 	.word	0x08005c2d
 80059a0:	08005c2d 	.word	0x08005c2d
 80059a4:	08005c2d 	.word	0x08005c2d
 80059a8:	08005c2d 	.word	0x08005c2d
 80059ac:	08005c2d 	.word	0x08005c2d
 80059b0:	08005a7b 	.word	0x08005a7b
 80059b4:	08005aa7 	.word	0x08005aa7
 80059b8:	08005c2d 	.word	0x08005c2d
 80059bc:	08005c2d 	.word	0x08005c2d
 80059c0:	080059f9 	.word	0x080059f9
 80059c4:	08005c2d 	.word	0x08005c2d
 80059c8:	08005a4f 	.word	0x08005a4f
 80059cc:	08005c2d 	.word	0x08005c2d
 80059d0:	08005c2d 	.word	0x08005c2d
 80059d4:	08005adf 	.word	0x08005adf
				case '%':
					put_char('%');
 80059d8:	2025      	movs	r0, #37	; 0x25
 80059da:	f7ff fe4b 	bl	8005674 <put_char>
					break;
 80059de:	e132      	b.n	8005c46 <term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	1d1a      	adds	r2, r3, #4
 80059e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					put_char(ch);
 80059ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7ff fe3f 	bl	8005674 <put_char>
					break;
 80059f6:	e126      	b.n	8005c46 <term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	1d1a      	adds	r2, r3, #4
 80059fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	66fb      	str	r3, [r7, #108]	; 0x6c
					put_string(p);
 8005a02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a04:	f7ff ff0a 	bl	800581c <put_string>
					break;
 8005a08:	e11d      	b.n	8005c46 <term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 8005a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 8005a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da07      	bge.n	8005a2e <term_printf+0x18e>
						put_char('-');
 8005a1e:	202d      	movs	r0, #45	; 0x2d
 8005a20:	f7ff fe28 	bl	8005674 <put_char>
						ul = -(long)ul;
 8005a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a28:	425b      	negs	r3, r3
 8005a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8005a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a30:	f107 000c 	add.w	r0, r7, #12
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a38:	220a      	movs	r2, #10
 8005a3a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005a3e:	f7ff fbb9 	bl	80051b4 <num2str>
					put_string(s);
 8005a42:	f107 030c 	add.w	r3, r7, #12
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fee8 	bl	800581c <put_string>
					break;
 8005a4c:	e0fb      	b.n	8005c46 <term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8005a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a50:	1d1a      	adds	r2, r3, #4
 8005a52:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	f107 000c 	add.w	r0, r7, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a64:	220a      	movs	r2, #10
 8005a66:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005a6a:	f7ff fba3 	bl	80051b4 <num2str>
					put_string(s);
 8005a6e:	f107 030c 	add.w	r3, r7, #12
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fed2 	bl	800581c <put_string>
					break;
 8005a78:	e0e5      	b.n	8005c46 <term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 8005a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a88:	f107 000c 	add.w	r0, r7, #12
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a90:	2208      	movs	r2, #8
 8005a92:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005a96:	f7ff fb8d 	bl	80051b4 <num2str>
					put_string(s);
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff febc 	bl	800581c <put_string>
					break;
 8005aa4:	e0cf      	b.n	8005c46 <term_printf+0x3a6>
				case 'p':
					put_char('0');
 8005aa6:	2030      	movs	r0, #48	; 0x30
 8005aa8:	f7ff fde4 	bl	8005674 <put_char>
					put_char('x');
 8005aac:	2078      	movs	r0, #120	; 0x78
 8005aae:	f7ff fde1 	bl	8005674 <put_char>
					ul = va_arg(ap, unsigned int);
 8005ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab4:	1d1a      	adds	r2, r3, #4
 8005ab6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 8005abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac0:	f107 000c 	add.w	r0, r7, #12
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ac8:	2210      	movs	r2, #16
 8005aca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005ace:	f7ff fb71 	bl	80051b4 <num2str>
					put_string(s);
 8005ad2:	f107 030c 	add.w	r3, r7, #12
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fea0 	bl	800581c <put_string>
					break;
 8005adc:	e0b3      	b.n	8005c46 <term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 8005ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 8005aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aec:	f107 000c 	add.w	r0, r7, #12
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005af4:	2210      	movs	r2, #16
 8005af6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8005afa:	f7ff fb5b 	bl	80051b4 <num2str>
					put_string(s);
 8005afe:	f107 030c 	add.w	r3, r7, #12
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fe8a 	bl	800581c <put_string>
					break;
 8005b08:	e09d      	b.n	8005c46 <term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <term_printf+0x28a>
 8005b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b12:	3307      	adds	r3, #7
 8005b14:	f023 0307 	bic.w	r3, r3, #7
 8005b18:	f103 0208 	add.w	r2, r3, #8
 8005b1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8005b26:	2301      	movs	r3, #1
 8005b28:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 8005b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2c:	3307      	adds	r3, #7
 8005b2e:	f023 0307 	bic.w	r3, r3, #7
 8005b32:	f103 0208 	add.w	r2, r3, #8
 8005b36:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8005b40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	0fc2      	lsrs	r2, r0, #31
 8005b4e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005b52:	0fcb      	lsrs	r3, r1, #31
 8005b54:	4613      	mov	r3, r2
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8005b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b62:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 8005b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b6e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 8005b72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b76:	eddf 6a40 	vldr	s13, [pc, #256]	; 8005c78 <term_printf+0x3d8>
 8005b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b7e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 8005b82:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b8e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8005b92:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	0dc2      	lsrs	r2, r0, #23
 8005ba0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8005ba4:	0dcb      	lsrs	r3, r1, #23
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8005bae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	0d02      	lsrs	r2, r0, #20
 8005bbc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8005bc0:	0d0b      	lsrs	r3, r1, #20
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 8005bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd0:	3b7f      	subs	r3, #127	; 0x7f
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 8005bd4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005bd6:	f7fa fc63 	bl	80004a0 <__aeabi_f2d>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005be0:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8005c70 <term_printf+0x3d0>
 8005be4:	f7ff fc78 	bl	80054d8 <myPow>
 8005be8:	ec53 2b10 	vmov	r2, r3, d0
 8005bec:	4620      	mov	r0, r4
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fa fcae 	bl	8000550 <__aeabi_dmul>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f7fa feba 	bl	8000974 <__aeabi_d2f>
 8005c00:	4603      	mov	r3, r0
 8005c02:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ put_char('-'); }
 8005c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d102      	bne.n	8005c10 <term_printf+0x370>
 8005c0a:	202d      	movs	r0, #45	; 0x2d
 8005c0c:	f7ff fd32 	bl	8005674 <put_char>
					float2str((char*)s, f, 5);
 8005c10:	f107 030c 	add.w	r3, r7, #12
 8005c14:	2105      	movs	r1, #5
 8005c16:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fc0c 	bl	8005438 <float2str>
					put_string((char*)s);
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff fdf9 	bl	800581c <put_string>
					break;
 8005c2a:	e00c      	b.n	8005c46 <term_printf+0x3a6>

				default:
					put_char(*fmt);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fd1e 	bl	8005674 <put_char>
 8005c38:	e005      	b.n	8005c46 <term_printf+0x3a6>
			}
		} else put_char(*fmt);
 8005c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fd17 	bl	8005674 <put_char>
		fmt++;
 8005c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8005c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f47f ae2c 	bne.w	80058b4 <term_printf+0x14>
	}
	va_end(ap);
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	3788      	adds	r7, #136	; 0x88
 8005c62:	46bd      	mov	sp, r7
 8005c64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005c68:	b004      	add	sp, #16
 8005c6a:	4770      	bx	lr
 8005c6c:	f3af 8000 	nop.w
 8005c70:	00000000 	.word	0x00000000
 8005c74:	40000000 	.word	0x40000000
 8005c78:	49800000 	.word	0x49800000
 8005c7c:	00000000 	.word	0x00000000

08005c80 <term_printf_zigbee>:
	}
	va_end(ap);
}
//=====================================================
void term_printf_zigbee(const char* fmt, ...)
{
 8005c80:	b40f      	push	{r0, r1, r2, r3}
 8005c82:	b5b0      	push	{r4, r5, r7, lr}
 8005c84:	b09e      	sub	sp, #120	; 0x78
 8005c86:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[34];
	int first=0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c


	va_start(ap, fmt);
 8005c8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c90:	633b      	str	r3, [r7, #48]	; 0x30
	while (*fmt != '\0') {
 8005c92:	e1c0      	b.n	8006016 <term_printf_zigbee+0x396>
		if (*fmt =='%') {
 8005c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b25      	cmp	r3, #37	; 0x25
 8005c9c:	f040 81b0 	bne.w	8006000 <term_printf_zigbee+0x380>
			size=0; sp=1;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	663b      	str	r3, [r7, #96]	; 0x60
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8005ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b30      	cmp	r3, #48	; 0x30
 8005cba:	d106      	bne.n	8005cca <term_printf_zigbee+0x4a>
 8005cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
			ch=*fmt;
 8005cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8005cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d92c      	bls.n	8005d36 <term_printf_zigbee+0xb6>
 8005cdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ce0:	2b39      	cmp	r3, #57	; 0x39
 8005ce2:	d828      	bhi.n	8005d36 <term_printf_zigbee+0xb6>
				char tmp[10];
				int i=0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	65bb      	str	r3, [r7, #88]	; 0x58
				while ((ch>='0') && (ch<='9')) {
 8005ce8:	e012      	b.n	8005d10 <term_printf_zigbee+0x90>
					tmp[i++]=ch;
 8005cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cf0:	3370      	adds	r3, #112	; 0x70
 8005cf2:	443b      	add	r3, r7
 8005cf4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005cf8:	f803 2c70 	strb.w	r2, [r3, #-112]
					ch=*++fmt;
 8005cfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d00:	3301      	adds	r3, #1
 8005d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				while ((ch>='0') && (ch<='9')) {
 8005d10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d14:	2b2f      	cmp	r3, #47	; 0x2f
 8005d16:	d903      	bls.n	8005d20 <term_printf_zigbee+0xa0>
 8005d18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d1c:	2b39      	cmp	r3, #57	; 0x39
 8005d1e:	d9e4      	bls.n	8005cea <term_printf_zigbee+0x6a>
				}
				tmp[i]='\0';
 8005d20:	463a      	mov	r2, r7
 8005d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d24:	4413      	add	r3, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	210a      	movs	r1, #10
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fac4 	bl	80052bc <str2num>
 8005d34:	6678      	str	r0, [r7, #100]	; 0x64
			}
			switch (ch) {
 8005d36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d3a:	2b25      	cmp	r3, #37	; 0x25
 8005d3c:	d03c      	beq.n	8005db8 <term_printf_zigbee+0x138>
 8005d3e:	2b25      	cmp	r3, #37	; 0x25
 8005d40:	f2c0 8157 	blt.w	8005ff2 <term_printf_zigbee+0x372>
 8005d44:	2b78      	cmp	r3, #120	; 0x78
 8005d46:	f300 8154 	bgt.w	8005ff2 <term_printf_zigbee+0x372>
 8005d4a:	2b63      	cmp	r3, #99	; 0x63
 8005d4c:	f2c0 8151 	blt.w	8005ff2 <term_printf_zigbee+0x372>
 8005d50:	3b63      	subs	r3, #99	; 0x63
 8005d52:	2b15      	cmp	r3, #21
 8005d54:	f200 814d 	bhi.w	8005ff2 <term_printf_zigbee+0x372>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <term_printf_zigbee+0xe0>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005dc1 	.word	0x08005dc1
 8005d64:	08005deb 	.word	0x08005deb
 8005d68:	08005ff3 	.word	0x08005ff3
 8005d6c:	08005ed1 	.word	0x08005ed1
 8005d70:	08005ff3 	.word	0x08005ff3
 8005d74:	08005ff3 	.word	0x08005ff3
 8005d78:	08005ff3 	.word	0x08005ff3
 8005d7c:	08005ff3 	.word	0x08005ff3
 8005d80:	08005ff3 	.word	0x08005ff3
 8005d84:	08005ff3 	.word	0x08005ff3
 8005d88:	08005ff3 	.word	0x08005ff3
 8005d8c:	08005ff3 	.word	0x08005ff3
 8005d90:	08005e4d 	.word	0x08005e4d
 8005d94:	08005e75 	.word	0x08005e75
 8005d98:	08005ff3 	.word	0x08005ff3
 8005d9c:	08005ff3 	.word	0x08005ff3
 8005da0:	08005dd9 	.word	0x08005dd9
 8005da4:	08005ff3 	.word	0x08005ff3
 8005da8:	08005e25 	.word	0x08005e25
 8005dac:	08005ff3 	.word	0x08005ff3
 8005db0:	08005ff3 	.word	0x08005ff3
 8005db4:	08005ea9 	.word	0x08005ea9
				case '%':
					 putchar_zigbee('%');
 8005db8:	2025      	movs	r0, #37	; 0x25
 8005dba:	f7ff fc6f 	bl	800569c <putchar_zigbee>
					break;
 8005dbe:	e125      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'c':
					ch = va_arg(ap, int);
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	633a      	str	r2, [r7, #48]	; 0x30
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					putchar_zigbee(ch);
 8005dcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fc63 	bl	800569c <putchar_zigbee>
					break;
 8005dd6:	e119      	b.n	800600c <term_printf_zigbee+0x38c>
				case 's':
					p = va_arg(ap, char *);
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	1d1a      	adds	r2, r3, #4
 8005ddc:	633a      	str	r2, [r7, #48]	; 0x30
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	657b      	str	r3, [r7, #84]	; 0x54
					put_string_zigbee(p);
 8005de2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005de4:	f7ff fd30 	bl	8005848 <put_string_zigbee>
					break;
 8005de8:	e110      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'd':
					ul = va_arg(ap, long);
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	633a      	str	r2, [r7, #48]	; 0x30
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	66bb      	str	r3, [r7, #104]	; 0x68
					if ((long)ul < 0) {
 8005df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da05      	bge.n	8005e06 <term_printf_zigbee+0x186>
						putchar_zigbee('-');
 8005dfa:	202d      	movs	r0, #45	; 0x2d
 8005dfc:	f7ff fc4e 	bl	800569c <putchar_zigbee>
						ul = -(long)ul;
 8005e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e02:	425b      	negs	r3, r3
 8005e04:	66bb      	str	r3, [r7, #104]	; 0x68
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8005e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e08:	f107 000c 	add.w	r0, r7, #12
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e10:	220a      	movs	r2, #10
 8005e12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e14:	f7ff f9ce 	bl	80051b4 <num2str>
					put_string_zigbee(s);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fd13 	bl	8005848 <put_string_zigbee>
					break;
 8005e22:	e0f3      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	633a      	str	r2, [r7, #48]	; 0x30
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	66bb      	str	r3, [r7, #104]	; 0x68
					num2str(s, ul, 10, size, sp);
 8005e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e30:	f107 000c 	add.w	r0, r7, #12
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e38:	220a      	movs	r2, #10
 8005e3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e3c:	f7ff f9ba 	bl	80051b4 <num2str>
					put_string_zigbee(s);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fcff 	bl	8005848 <put_string_zigbee>
					break;
 8005e4a:	e0df      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	1d1a      	adds	r2, r3, #4
 8005e50:	633a      	str	r2, [r7, #48]	; 0x30
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	66bb      	str	r3, [r7, #104]	; 0x68
					num2str(s, ul, 8, size, sp);
 8005e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e58:	f107 000c 	add.w	r0, r7, #12
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e60:	2208      	movs	r2, #8
 8005e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e64:	f7ff f9a6 	bl	80051b4 <num2str>
					put_string_zigbee(s);
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fceb 	bl	8005848 <put_string_zigbee>
					break;
 8005e72:	e0cb      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'p':
					putchar_zigbee('0');
 8005e74:	2030      	movs	r0, #48	; 0x30
 8005e76:	f7ff fc11 	bl	800569c <putchar_zigbee>
					putchar_zigbee('x');
 8005e7a:	2078      	movs	r0, #120	; 0x78
 8005e7c:	f7ff fc0e 	bl	800569c <putchar_zigbee>
					ul = va_arg(ap, unsigned int);
 8005e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	633a      	str	r2, [r7, #48]	; 0x30
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	66bb      	str	r3, [r7, #104]	; 0x68
					num2str(s, ul, 16, size, sp);
 8005e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e8c:	f107 000c 	add.w	r0, r7, #12
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e94:	2210      	movs	r2, #16
 8005e96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e98:	f7ff f98c 	bl	80051b4 <num2str>
					put_string_zigbee(s);
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fcd1 	bl	8005848 <put_string_zigbee>
					break;
 8005ea6:	e0b1      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'x':
					ul = va_arg(ap, unsigned int);
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	1d1a      	adds	r2, r3, #4
 8005eac:	633a      	str	r2, [r7, #48]	; 0x30
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	66bb      	str	r3, [r7, #104]	; 0x68
					num2str(s, ul, 16, size, sp);
 8005eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eb4:	f107 000c 	add.w	r0, r7, #12
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ec0:	f7ff f978 	bl	80051b4 <num2str>
					put_string_zigbee(s);
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fcbd 	bl	8005848 <put_string_zigbee>
					break;
 8005ece:	e09d      	b.n	800600c <term_printf_zigbee+0x38c>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 8005ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10c      	bne.n	8005ef0 <term_printf_zigbee+0x270>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	3307      	adds	r3, #7
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	f103 0208 	add.w	r2, r3, #8
 8005ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005eec:	2301      	movs	r3, #1
 8005eee:	65fb      	str	r3, [r7, #92]	; 0x5c
					ull = va_arg(ap, long long unsigned int);
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	3307      	adds	r3, #7
 8005ef4:	f023 0307 	bic.w	r3, r3, #7
 8005ef8:	f103 0208 	add.w	r2, r3, #8
 8005efc:	633a      	str	r2, [r7, #48]	; 0x30
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
					int sign = ( ull & 0x80000000 ) >> 31;
 8005f06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	0fc2      	lsrs	r2, r0, #31
 8005f14:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005f18:	0fcb      	lsrs	r3, r1, #31
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f28:	643b      	str	r3, [r7, #64]	; 0x40
					float mf = (float)m ;
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					mf = mf / pow(2.0,20.0);
 8005f38:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f3c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006040 <term_printf_zigbee+0x3c0>
 8005f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					mf = mf + 1.0;
 8005f48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f54:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8005f58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	0dc2      	lsrs	r2, r0, #23
 8005f66:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8005f6a:	0dcb      	lsrs	r3, r1, #23
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f72:	63bb      	str	r3, [r7, #56]	; 0x38
					e = e | (( ull & 0x000F00000 ) >> 20);
 8005f74:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	0d02      	lsrs	r2, r0, #20
 8005f82:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8005f86:	0d0b      	lsrs	r3, r1, #20
 8005f88:	4613      	mov	r3, r2
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	4313      	orrs	r3, r2
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38
					e = e - 127;
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	3b7f      	subs	r3, #127	; 0x7f
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
					float f = mf*myPow(2.0,e);
 8005f9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f9c:	f7fa fa80 	bl	80004a0 <__aeabi_f2d>
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fa6:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8006038 <term_printf_zigbee+0x3b8>
 8005faa:	f7ff fa95 	bl	80054d8 <myPow>
 8005fae:	ec53 2b10 	vmov	r2, r3, d0
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	f7fa facb 	bl	8000550 <__aeabi_dmul>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	f7fa fcd7 	bl	8000974 <__aeabi_d2f>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
					if(sign==1){ put_char('-'); }
 8005fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d102      	bne.n	8005fd6 <term_printf_zigbee+0x356>
 8005fd0:	202d      	movs	r0, #45	; 0x2d
 8005fd2:	f7ff fb4f 	bl	8005674 <put_char>
					float2str((char*)s, f, 5);
 8005fd6:	f107 030c 	add.w	r3, r7, #12
 8005fda:	2105      	movs	r1, #5
 8005fdc:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fa29 	bl	8005438 <float2str>
					put_string_zigbee((char*)s);
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fc2c 	bl	8005848 <put_string_zigbee>
					break;
 8005ff0:	e00c      	b.n	800600c <term_printf_zigbee+0x38c>
				default:
					putchar_zigbee(*fmt);
 8005ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fb4f 	bl	800569c <putchar_zigbee>
 8005ffe:	e005      	b.n	800600c <term_printf_zigbee+0x38c>
			}
		} else putchar_zigbee(*fmt);
 8006000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fb48 	bl	800569c <putchar_zigbee>
		fmt++;
 800600c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006010:	3301      	adds	r3, #1
 8006012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while (*fmt != '\0') {
 8006016:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f47f ae39 	bne.w	8005c94 <term_printf_zigbee+0x14>
	}
	va_end(ap);
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	3770      	adds	r7, #112	; 0x70
 8006028:	46bd      	mov	sp, r7
 800602a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800602e:	b004      	add	sp, #16
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	f3af 8000 	nop.w
 8006038:	00000000 	.word	0x00000000
 800603c:	40000000 	.word	0x40000000
 8006040:	49800000 	.word	0x49800000

08006044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800607c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006048:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800604a:	e003      	b.n	8006054 <LoopCopyDataInit>

0800604c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800604e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006050:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006052:	3104      	adds	r1, #4

08006054 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006054:	480b      	ldr	r0, [pc, #44]	; (8006084 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006058:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800605a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800605c:	d3f6      	bcc.n	800604c <CopyDataInit>
  ldr  r2, =_sbss
 800605e:	4a0b      	ldr	r2, [pc, #44]	; (800608c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006060:	e002      	b.n	8006068 <LoopFillZerobss>

08006062 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006062:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006064:	f842 3b04 	str.w	r3, [r2], #4

08006068 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800606a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800606c:	d3f9      	bcc.n	8006062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800606e:	f7ff f86b 	bl	8005148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006072:	f000 f811 	bl	8006098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006076:	f7fe fcc3 	bl	8004a00 <main>
  bx  lr    
 800607a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800607c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006080:	080063b8 	.word	0x080063b8
  ldr  r0, =_sdata
 8006084:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006088:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 800608c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8006090:	20000454 	.word	0x20000454

08006094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006094:	e7fe      	b.n	8006094 <ADC_IRQHandler>
	...

08006098 <__libc_init_array>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4d0d      	ldr	r5, [pc, #52]	; (80060d0 <__libc_init_array+0x38>)
 800609c:	4c0d      	ldr	r4, [pc, #52]	; (80060d4 <__libc_init_array+0x3c>)
 800609e:	1b64      	subs	r4, r4, r5
 80060a0:	10a4      	asrs	r4, r4, #2
 80060a2:	2600      	movs	r6, #0
 80060a4:	42a6      	cmp	r6, r4
 80060a6:	d109      	bne.n	80060bc <__libc_init_array+0x24>
 80060a8:	4d0b      	ldr	r5, [pc, #44]	; (80060d8 <__libc_init_array+0x40>)
 80060aa:	4c0c      	ldr	r4, [pc, #48]	; (80060dc <__libc_init_array+0x44>)
 80060ac:	f000 f826 	bl	80060fc <_init>
 80060b0:	1b64      	subs	r4, r4, r5
 80060b2:	10a4      	asrs	r4, r4, #2
 80060b4:	2600      	movs	r6, #0
 80060b6:	42a6      	cmp	r6, r4
 80060b8:	d105      	bne.n	80060c6 <__libc_init_array+0x2e>
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
 80060bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c0:	4798      	blx	r3
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7ee      	b.n	80060a4 <__libc_init_array+0xc>
 80060c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ca:	4798      	blx	r3
 80060cc:	3601      	adds	r6, #1
 80060ce:	e7f2      	b.n	80060b6 <__libc_init_array+0x1e>
 80060d0:	080063b0 	.word	0x080063b0
 80060d4:	080063b0 	.word	0x080063b0
 80060d8:	080063b0 	.word	0x080063b0
 80060dc:	080063b4 	.word	0x080063b4

080060e0 <memcpy>:
 80060e0:	440a      	add	r2, r1
 80060e2:	4291      	cmp	r1, r2
 80060e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060e8:	d100      	bne.n	80060ec <memcpy+0xc>
 80060ea:	4770      	bx	lr
 80060ec:	b510      	push	{r4, lr}
 80060ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f6:	4291      	cmp	r1, r2
 80060f8:	d1f9      	bne.n	80060ee <memcpy+0xe>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
